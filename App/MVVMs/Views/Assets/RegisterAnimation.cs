//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.1.240821.1+077322fa26
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile RegisterAnimation.json
//       
//       Input file:
//           RegisterAnimation.json (83099 bytes created 17:49+07:00 Sep 8 2024)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   152 |
// |--------------------------+-------|
// | Expression animators     |     3 |
// | KeyFrame animators       |    20 |
// | Reference parameters     |     3 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     3 |
// | PathKeyFrameAnimations   |     1 |
// |--------------------------+-------|
// | ContainerVisuals         |     3 |
// | ShapeVisuals             |     2 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |     9 |
// |--------------------------+-------|
// | Brushes                  |    12 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Media;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Numerics;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        Login - 01
    // Frame rate:  29.9700012207031 fps
    // Frame count: 150.000006109625
    // Duration:    5005.0 mS
    public sealed class RegisterAnimation
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
        , Microsoft.UI.Xaml.Controls.IDynamicAnimatedVisualSource
        , INotifyPropertyChanged
    {
        const int c_loadedImageSurfaceCount = 10;
        int _loadCompleteEventCount;
        bool _isImageLoadingAsynchronous;
        bool _isTryCreateAnimatedVisualCalled;
        bool _isImageLoadingStarted;
        HashSet<TypedEventHandler<IDynamicAnimatedVisualSource, object>> _animatedVisualInvalidatedEventTokenTable = new HashSet<TypedEventHandler<IDynamicAnimatedVisualSource, object>>();
        LoadedImageSurface _image_image_0;
        LoadedImageSurface _image_image_1;
        LoadedImageSurface _image_image_2;
        LoadedImageSurface _image_image_3;
        LoadedImageSurface _image_image_4;
        LoadedImageSurface _image_image_5;
        LoadedImageSurface _image_image_6;
        LoadedImageSurface _image_image_7;
        LoadedImageSurface _image_image_8;
        LoadedImageSurface _image_image_9;

        // Animation duration: 5.005 seconds.
        internal const long c_durationTicks = 50050050;

        /// <summary>
        /// This implementation of the INotifyPropertyChanged.PropertyChanged event is specific
        /// to C# and does not work on WinRT.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        public event TypedEventHandler<IDynamicAnimatedVisualSource, object> AnimatedVisualInvalidated
        {
            add
            {
                _animatedVisualInvalidatedEventTokenTable.Add(value);
            }
            remove
            {
                _animatedVisualInvalidatedEventTokenTable.Remove(value);
            }
        }

        /// <summary>
        /// If this property is set to true, <see cref="TryCreateAnimatedVisual"/> will return
        /// null until all images have loaded. When all images have loaded,
        /// <see cref="TryCreateAnimatedVisual"/> will return the AnimatedVisual. To use, set
        /// it when instantiating the AnimatedVisualSource. Once
        /// <see cref="TryCreateAnimatedVisual"/> is called, changes made to this property will
        /// be ignored. Default value is false.
        /// </summary>
        public bool IsImageLoadingAsynchronous
        {
            get { return _isImageLoadingAsynchronous; }
            set
            {
                if (!_isTryCreateAnimatedVisualCalled && _isImageLoadingAsynchronous != value)
                {
                    _isImageLoadingAsynchronous = value;
                    NotifyPropertyChanged(nameof(IsImageLoadingAsynchronous));
                }
            }
        }

        /// <summary>
        /// Returns true if all images have finished loading.
        /// </summary>
        public bool IsImageLoadingCompleted { get; private set; }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            _isTryCreateAnimatedVisualCalled = true;
            diagnostics = null;

            EnsureImageLoadingStarted();

            if (_isImageLoadingAsynchronous && _loadCompleteEventCount != c_loadedImageSurfaceCount)
            {
                return null;
            }

            var res = 
                new RegisterAnimation_AnimatedVisual(
                    compositor,
                    _image_image_0,
                    _image_image_1,
                    _image_image_2,
                    _image_image_3,
                    _image_image_4,
                    _image_image_5,
                    _image_image_6,
                    _image_image_7,
                    _image_image_8,
                    _image_image_9
                    );
                res.CreateAnimations();
                return res;
        }
        void EnsureImageLoadingStarted()
        {
            if (!_isImageLoadingStarted)
            {
                var eventHandler = new TypedEventHandler<LoadedImageSurface, LoadedImageSourceLoadCompletedEventArgs>(HandleLoadCompleted);
                _image_image_0 = LoadedImageSurface.StartLoadFromStream(Convert.FromBase64String(s_Image_image_0_Bytes_base64).AsBuffer().AsStream().AsRandomAccessStream());
                _image_image_0.LoadCompleted += eventHandler;
                _image_image_1 = LoadedImageSurface.StartLoadFromStream(Convert.FromBase64String(s_Image_image_1_Bytes_base64).AsBuffer().AsStream().AsRandomAccessStream());
                _image_image_1.LoadCompleted += eventHandler;
                _image_image_2 = LoadedImageSurface.StartLoadFromStream(Convert.FromBase64String(s_Image_image_2_Bytes_base64).AsBuffer().AsStream().AsRandomAccessStream());
                _image_image_2.LoadCompleted += eventHandler;
                _image_image_3 = LoadedImageSurface.StartLoadFromStream(Convert.FromBase64String(s_Image_image_3_Bytes_base64).AsBuffer().AsStream().AsRandomAccessStream());
                _image_image_3.LoadCompleted += eventHandler;
                _image_image_4 = LoadedImageSurface.StartLoadFromStream(Convert.FromBase64String(s_Image_image_4_Bytes_base64).AsBuffer().AsStream().AsRandomAccessStream());
                _image_image_4.LoadCompleted += eventHandler;
                _image_image_5 = LoadedImageSurface.StartLoadFromStream(Convert.FromBase64String(s_Image_image_5_Bytes_base64).AsBuffer().AsStream().AsRandomAccessStream());
                _image_image_5.LoadCompleted += eventHandler;
                _image_image_6 = LoadedImageSurface.StartLoadFromStream(Convert.FromBase64String(s_Image_image_6_Bytes_base64).AsBuffer().AsStream().AsRandomAccessStream());
                _image_image_6.LoadCompleted += eventHandler;
                _image_image_7 = LoadedImageSurface.StartLoadFromStream(Convert.FromBase64String(s_Image_image_7_Bytes_base64).AsBuffer().AsStream().AsRandomAccessStream());
                _image_image_7.LoadCompleted += eventHandler;
                _image_image_8 = LoadedImageSurface.StartLoadFromStream(Convert.FromBase64String(s_Image_image_8_Bytes_base64).AsBuffer().AsStream().AsRandomAccessStream());
                _image_image_8.LoadCompleted += eventHandler;
                _image_image_9 = LoadedImageSurface.StartLoadFromStream(Convert.FromBase64String(s_Image_image_9_Bytes_base64).AsBuffer().AsStream().AsRandomAccessStream());
                _image_image_9.LoadCompleted += eventHandler;
                _isImageLoadingStarted = true;
            }
        }

        void HandleLoadCompleted(LoadedImageSurface sender, LoadedImageSourceLoadCompletedEventArgs e)
        {
            _loadCompleteEventCount++;
            sender.LoadCompleted -= HandleLoadCompleted;

            if (_loadCompleteEventCount == c_loadedImageSurfaceCount)
            {
                IsImageLoadingCompleted = true;
                NotifyPropertyChanged(nameof(IsImageLoadingCompleted));
                if (_isImageLoadingAsynchronous)
                {
                    foreach (var v in _animatedVisualInvalidatedEventTokenTable) v.Invoke(this, null);
                }
            }
        }

        void NotifyPropertyChanged(string name)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }


        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 150.000006109625;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 29.9700012207031;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(50050050);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 150.000006109625;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        // Image: "image_0" png 10x35.
        static readonly string s_Image_image_0_Bytes_base64 = 
        "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAjCAYAAACtkZtDAAAACXBIWXMAAAABAAAAAQBPJcTWAAAAJHpUWHRDcmVhdG9yAAAImXNMyU9KVX" +
        "BMK0ktUnBNS0tNLikGAEF6Bs5qehXFAAAA2UlEQVQ4jc3UYRWCMBSG4feagAg0kAhEIIIRjEAEIhDBCNpgNCACDT5/jOHgMPAo5+j9BdvD" +
        "Nu52ZwCSMqABcl7RA1czG6YWSU7r4WJUJlCIEuAEFGxHHqDbdvQBvhV/Dn3CJeVbSQzaRqzEaJiZHb7GH8FuCR8JOCzh11N/Du+J/tvsTV" +
        "K2UmBurE5g3OvogwpfQ87M5qMdHtPUkgqgivpuZjavUElt4ty2Map3booafB7LneVVAWY78BxgvwO7ANttRzM9SbpIGlI/AvM8ZvjtK/GH" +
        "xMW37ROY9/QKoYgEagAAAABJRU5ErkJggg=="
        ;

        // Image: "image_1" png 66x66.
        static readonly string s_Image_image_1_Bytes_base64 = 
        "iVBORw0KGgoAAAANSUhEUgAAAEIAAABCCAYAAADjVADoAAAACXBIWXMAAAABAAAAAQBPJcTWAAAAJHpUWHRDcmVhdG9yAAAImXNMyU9KVX" +
        "BMK0ktUnBNS0tNLikGAEF6Bs5qehXFAAADy0lEQVR4nO2cT1biWBSHv/usdgo7KHpQ1OlRsYPKDpqsQDytNWYJuAPGWn2gVhBdQcUdUKM6" +
        "2gNkBzpV4PYgiSgmQCDJg+A3AvLyuOeX+/7fG6EAvN6wynjcgKmDSA2ltvgO9TFyx4SB+60+KMJGyati7/tNE8QBbYJ83Kw2vUKMjxlfus" +
        "d/3WVh3zyZCuH1fteYHLSBFlDJsu4ZeoXIpftPvZ9lrZkIEQrQAY6yqG81dIRIJytBNhLC6w2rTJ66FCrAPDoC2u7J58tNallbiLAP6JNb" +
        "E0iLXnFw2HKP/7xf5+7UQgRe8NgH+XudP8yZB1Sa7uknP+2NJk1h7/y2weTJ31IRACqI/vQubjppb1zZI7zz2wYGn61pCkv54Z7UW6sWXk" +
        "mIHRQhYmUxlgqxwyJErCTGQiFKIELEUjESO0uvN6xi6LP7IgAcef/ethYVSB41Jo994Eu29lhE6Xrnt42ky7FChJOlbR0i16USengsb4Tw" +
        "esNqOGMsI1+S5hhvPSJYO5ShX4hHpO31ftfmf34lRFjA4gKqECrhSvkVrz0ipkBJOZr3imch9sQbZsw9dPPiQrtoWyzTDAaGgJdNo1W8LV" +
        "apMH1qRl8MRPOGEo8USUxnDz/0CHHsWGIZ4WvUPEIhtLmofKmZPDoAJpxJbnjusMsErcEEJ1B7jNIAMDB1LJtiF+ErgEGkZtcS+3i9YdUs" +
        "P5DdA8bjRqrt/DLzLkSIQaguL1Z+3j0ixKCsdWhaNt49IuRdCADVewPq27bDNu63+sBg5M62IXbREYBhQiHhe1vMAMAUFce4tYjxYbYxc2" +
        "XRFLtMgj4yECJUZf/QUdQiAiHMeKPQvN1F/OiTAQjCeveweUzpRh9nEyqRffOKXy8HimchglDeYEzdC2TmDTA/xRbpFGmLPXQ0H8P9Soi9" +
        "8YqYBx636Cr3YbByHRfR/0aIIMq9xCOIxj/o+GX4wWELeMjRHDuoniUtKRIDTr2L/xxEf+ZnVcEo1+5p3Um6nLgx455+8lE9y8WowtERH/" +
        "5YeNC9PBb7+22f3Q4pemCKs2yVvVp0/u6KsZIIkCZfY/fEWFkESLF5G0a3/1jXqmLRURoRIOUutntSbyEcs81Dq3LNwWEj7c7bWll+YR5H" +
        "n22L3lc9c08/d9a5dbO8z4ubDiJtbEfkKdco7U32XzfOBLaTBRyRXTZwZrnhLwQpImbzF0I3y/zwzN8W4PWGVaZPzXBxk2EfoiMQnyndPI" +
        "4gcnttAjxnDTsgDkojCtxaDR0BA8T4TNTP+/wlVyHimL1UIwHVexuHTv8DSl1Q0K4ZaJUAAAAASUVORK5CYII="
        ;

        // Image: "image_2" png 69x116.
        static readonly string s_Image_image_2_Bytes_base64 = 
        "iVBORw0KGgoAAAANSUhEUgAAAEUAAAB0CAYAAADTq/8hAAAACXBIWXMAAAABAAAAAQBPJcTWAAAAJHpUWHRDcmVhdG9yAAAImXNMyU9KVX" +
        "BMK0ktUnBNS0tNLikGAEF6Bs5qehXFAAACbUlEQVR4nO3dMU4UYRjG8eeb2Ygdm2hlwxSQ0DGJIW4nN4AbOOEEc4T1BF5AcewsOcLaoTbQ" +
        "mYgJNsbKaCdxmdeCXZyQR0IjCPP/NzvvzDebyS+zyXZfLlJRVsP7Sw9f33uw9uHbl/2v2XU/0P/QYCFvpNiMLJtIEiiSFDGcHS1KoNhAMY" +
        "FiAsUEigkUEygmUEygmEAxgWICxQSKCRQTKCZQTKCYQDGBYgLFBIoJFBMoJlBMoJhAMYFiAsUEigkUEygmUEygmEAxgWICxQSKCRQTKCZQ" +
        "TKCYQDGBYgLFBIoJFBMoJlBMoJhAMYFiAsUEigkUEygmUEygmEAxgWICxQSKCRQTKCZQTKCYQDGBYgLFBIoJFBMoJlBMoJhAMYFiAsUEig" +
        "kUEygmUEygmEAxgWICxQSKCRQTKCZQTKCYQDGBYgLFBIoJFBMoJlAkKWnYHUE5ba079B6lKKvuW/JDAkX5nXzjbAjtS6Aoy9qtP4Mmpx89" +
        "riirYUQ6Q0kn7a7Uc5TB3azWbEc5SZ8/vm/6/fMpymqoUD2fU9J4ftxblNMNGTtvyd5OM7/WS5TlR9u1FJvzOSLV3eu9Q1kZbVeSns3nlO" +
        "LVp3cvdrtreoWyPNoeR+hl59TBr59Rn1+XrvCZrq3VUVVM26xR0uPO6YPpcbtxtN98P7/+VqOsrFel8lRHpCfnLv0VRJqhrI6qYqpB8a8f" +
        "8ipKaos2okxKW5KWzIKnh3s74wu/Y2W9Kmf7BC9etPDGF3qToq3nf9AuahBZPpbitoL8SCl2Q3lz+Pb55LI3DabHJ9VgIW86Gynf6FIWR6" +
        "F0JGWTw73LQ3T7DfD8eYjyPE78AAAAAElFTkSuQmCC"
        ;

        // Image: "image_3" png 41x66.
        static readonly string s_Image_image_3_Bytes_base64 = 
        "iVBORw0KGgoAAAANSUhEUgAAACkAAABCCAYAAADKU/9vAAAACXBIWXMAAAABAAAAAQBPJcTWAAAAJHpUWHRDcmVhdG9yAAAImXNMyU9KVX" +
        "BMK0ktUnBNS0tNLikGAEF6Bs5qehXFAAAC/klEQVRoge2ZP2/TQBiHf+850JF0YQLFUlspG2Yp3ppvQNgYrfQLZGXCjGz9ACU1G1vbjTHd" +
        "UorA2RAJyJU6V/FGqHMvQ5ySf07i9BK7kp/JPr/ne+Q7+947E5ZEN6y89lArkWADEqWpQUQdELuAqLcbh/Vl26K4FbZ298tEsAB+GbOqT8" +
        "QnDM2JK7yw5I5ZsZhhAyjElJuEcQYh7EVl50oWTUsPpHBA2Luz3GTzp0G3Z3mu05kZNetiv2vZAfBIpdoYlyRluXXhuFEBIurCjlmxiPgY" +
        "qxUEgAILUd/a3S9HBUx9kuH4O1qd13SY6dWvLx9OxssnJMMuPl6P1gQ+SVka7/oRyaJp6QELF6vv4llcBl1pDL9MI2MykMJBsoIAUNA2yB" +
        "4uuH2SSY3DKEjK54Nuv32S4Yc6NTCJg8GxAPovC1TMJCoh7BVNSwdCyf5cnD5umKoAIHTDyi+RLKwFApUBQGgPtVLCLrMoFE1LFyTYSNpk" +
        "Fj2IkohMWFMCA3pkgpEamIx7IMl5AYKetMc8BBhe0hLzSH13k2BPgGjm+iJpGOSJ/ro4vbAkVwCinrTILB6InksAsP2i0kHyye40mu3zmh" +
        "FmQTyx+EkJDhC+3QzNSdIkiqArHSCUbDcO62CcJWo0BhF/HCzG/n8nhbCTEpqCr4HtwYk2OLi++uZtPjE2CWQmojXKm5/nR58HJyMzTq/L" +
        "NoDmuo1GYJy1z2sHw0Ujkp7rdEhKC4C/Tq8hmsFfObEnNDF3ty4cl6QsYf2iPkk5dRtwaoKRgGgzR9KI2v6LzIJaF46bI2lg5WOUToOuLP" +
        "1oOF5kxCK32TYrNhhVqJ06fSJUW42aMy9QmxcAANdX3+uPnz77xIRNgO66uvRBeB905evfX48ai1SI/fdBN6x8bkNYAKqItzXTJMLBzR95" +
        "Mm+PfJzYkgPCIfA2Rkvv2o2avUxbqV8+AJmkOjJJVWSSqsgkVZFJqiKTVEUmqYpMUhWZpCoySVVkkqq4F5K5ZSsS4HGMfXai5f9h/gOdNQ" +
        "T+j+kyFgAAAABJRU5ErkJggg=="
        ;

        // Image: "image_4" png 174x224.
        static readonly string s_Image_image_4_Bytes_base64 = 
        "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" +
        "YLqqkJaG6CisUAi6FdUebmoefmoGfmgLm5mh+uIZdfW9PgqlXNUPFVQGN4DTsFoDEG1RiDaokDuRz09Az01DSga9cc1yZRjY2w2lYDDQ01" +
        "KZ4irKEBanULVDwOfX8KOjtdk8OYDa5SUKvj9m8e1TdLQbWuhlrVjPy9CSCXN1u8sZKUgrW2jaGlUo0xWOvWAo2NRos1E9xYA6yH1rEvSw" +
        "uzFKx1bVCrms0VWXUJSsFqb+VIAS1Jta0x1vJWHVxrbRsvwmjZrPZWoKH69rKqEtSaFnYPyBtLwWprrb4Y33vGGnghRv40xqBWV5cd38FV" +
        "a1ZXdWCqbyoer2ra319wGxuhmswOb1CdsRRUyyr/u/vZyeSwBtUvFfffXfAeXKWg4gwuGWApqOYmf7t63YFdBDKqKaDgcviLTFJN/vLkPb" +
        "gxBpcM8jl55b2rwOCSaT6Gxby3uFyTQBHAmyVJJAaXRGJwSSQGl0RicEkkBpdEYnBJJAaXRGJwSSQGl0RicEkkBpdEYnBJJAaXRGJwSSQG" +
        "l0RicEkkBpdEYnBJJAaXRGJwSSQGl0RicEkkBpdEYnBJJAaXRGJwSSQGl0RicEkkBpdEYnBJJAaXRGJwSSQGl0RicEkkBpdEYnBJJAaXRG" +
        "JwSSQGl0RicEkkBpdEYnBJJAaXRGJwSSQGl0RicEkkBpdEYnBJJAaXRGJwSSQGl0RicEkkBpdEYnBJJAaXRGJwSSQGl0RicEkkBpdEYnBJ" +
        "JAaXRGJwSSQGl0RicEkkBpdEYnBJJAaXRGJwSSQGl0RicEkkBpdEYnBJJAaXRPIe3LyuQTWIvPEcXD0/X4t6UD3T3htD7y3u3JznXYgqmv" +
        "PXEHoP7nzO14GIFqJ9NoTeuwozs+znkjF6esbXfr5GFfTMrK+DEZXI5Xyfwf0Fd2rK18GI3PT9rO99/Y3j5vLQWX9NPBEAIJfz3U0AqpiA" +
        "0FNT7OuSb3qyurO2/5mzXB76PrsM5J2ema36OqmqKV+dnWaXgbyZm4e+N1l1MVWvVdCT930PIlOdyWvkJyZ9zZSVit2ofpGN1siP3WN4aX" +
        "F5jfzYuJEJrHj/0zcsrfRY1SU54WW3gRY0N4/8j2NGZ10tpfWokZK0hp6YhJ64z9EGKtJTWfuMnMsbKlFdBIBYHhg1uShXZ6ehZ2ehWlqg" +
        "4s0GSyZJ9OycPcFgeFGW1hgFgNhs03xm1Wyj0cKRy9ut79SUHeDmJsBSZo9BkaRnZqGnpmu2ilCrfAYAFABMnf7vOaWxpyZHcqjmJiDWAD" +
        "Q2QsViDPIKoWfngPl5YD5nj81WPWKwqPH4vl1rASAGAFrrtIKqaXD1zCwwAwBZsAdMfmit0oXHFgCs3rf7HDRuhlYjomVQ2hoqPC5el+WV" +
        "HginOkTLcjze//SNwpNicFfv232uMNRAFDHj001zJQ1r6UhY3koCGA+wQkRLykMn1+3dWzJRVhLceP/TN5DXvcFWi6gyrdU/7d5AqQfmHu" +
        "L9uzNQ6vlgqkW0qOMtfTsXvPaqOJiaPT2ShNbv1a5ORIs6Ht+3K1npxYqzvfFnd6aR10+BfV4KmNY4uFhogSXW48b7d2emm+Y6tcKw0ZoR" +
        "LUTjJvL6qZa+XUNLvXXZ867ZE+cTsKwUoHdUVTmiB41rjdRyAlvgecGAHWCVBNALoN3r/kQFWmFYQZ2LP7sz7XXfqla62CFGAlCd9h+iyr" +
        "TSY0rr0TwwOts0nykfm/Xi/942eb7LlmoAAAAAAElFTkSuQmCC"
        ;

        // Image: "image_5" png 1x1.
        static readonly string s_Image_image_5_Bytes_base64 = 
        "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAECAYAAACp8Z5+AAAACXBIWXMAAAABAAAAAQBPJcTWAAAAJHpUWHRDcmVhdG9yAAAImXNMyU9KVX" +
        "BMK0ktUnBNS0tNLikGAEF6Bs5qehXFAAAADElEQVQImWNgoBwAAABEAAGC/mVLAAAAAElFTkSuQmCC"
        ;

        // Image: "image_6" png 384x4.
        static readonly string s_Image_image_6_Bytes_base64 = 
        "iVBORw0KGgoAAAANSUhEUgAAAYAAAAAECAYAAACHkejFAAAACXBIWXMAAAABAAAAAQBPJcTWAAAAJHpUWHRDcmVhdG9yAAAImXNMyU9KVX" +
        "BMK0ktUnBNS0tNLikGAEF6Bs5qehXFAAAAeElEQVRYhe3OsQ2CQBiG4e+XS2wZ4QoLSypD5yrECRjI4kZgBEoSG0oSKVyB3tzvFneJeZ8J" +
        "Hovd0IZzk+TeCgDw98zz+H6l1S63xyzTvXYIAFDMESx3J/M8SjpqbwAAZZj5tC3pY5J07Yf4VYiVTwCAAvblOUvSD9NaGhYF4PQOAAAAAE" +
        "lFTkSuQmCC"
        ;

        // Image: "image_7" png 690x445.
        static readonly string s_Image_image_7_Bytes_base64 = 
        "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" +
        "AFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRk" +
        "AQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQ" +
        "AAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYA" +
        "gCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFAC" +
        "BJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBI" +
        "kpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAki" +
        "RkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJ" +
        "WQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQh" +
        "YAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAF" +
        "ACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQ" +
        "BIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAAkiRkAQBIkpAFACBJQhYAgCQJWQAA" +
        "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"
        ;

        // Image: "image_8" png 787x6.
        static readonly string s_Image_image_8_Bytes_base64 = 
        "iVBORw0KGgoAAAANSUhEUgAAAxMAAAAGCAYAAAC4qcPlAAAACXBIWXMAAAABAAAAAQBPJcTWAAAAJHpUWHRDcmVhdG9yAAAImXNMyU9KVX" +
        "BMK0ktUnBNS0tNLikGAEF6Bs5qehXFAAAAjklEQVR4nO3ZwQ0BURhG0e9/JrFVgg7oRAtKUIJSpgUlWNvYa4KlBE8HEqshOaeCu7+1XG8X" +
        "w3w2pvdFAAAAPqm61uu5v5zG8zDMZ2PSN6mpqwAAgN/X01tbJlk3RwIAAPjSKklaqq5TlwAAAH+k55gk7XF/bpM6JLlNWwQAAPy4W1KH6q" +
        "/d1CEAAMAfewPoTxxQm8LWOAAAAABJRU5ErkJggg=="
        ;

        // Image: "image_9" png 939x640.
        static readonly string s_Image_image_9_Bytes_base64 = 
        "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"
        ;

        sealed class RegisterAnimation_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 50050050;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly LoadedImageSurface _image_image_0;
            readonly LoadedImageSurface _image_image_1;
            readonly LoadedImageSurface _image_image_2;
            readonly LoadedImageSurface _image_image_3;
            readonly LoadedImageSurface _image_image_4;
            readonly LoadedImageSurface _image_image_5;
            readonly LoadedImageSurface _image_image_6;
            readonly LoadedImageSurface _image_image_7;
            readonly LoadedImageSurface _image_image_8;
            readonly LoadedImageSurface _image_image_9;
            AnimationController _animationController_0;
            AnimationController _animationController_1;
            AnimationController _animationController_2;
            CompositionColorBrush _colorBrush_AlmostDarkSlateGray_FF233762;
            CompositionColorBrush _colorBrush_AlmostPowderBlue_FFC5D9FF;
            CompositionEllipseGeometry _ellipse_28;
            CompositionEllipseGeometry _ellipse_46;
            CompositionPath _path_0;
            CompositionPath _path_1;
            CompositionPathGeometry _pathGeometry_0;
            CompositionSpriteShape _spriteShape_5;
            CompositionSurfaceBrush _surfaceBrush_6;
            ContainerVisual _containerVisual_0;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            CubicBezierEasingFunction _cubicBezierEasingFunction_3;
            CubicBezierEasingFunction _cubicBezierEasingFunction_4;
            ScalarKeyFrameAnimation _scalarAnimation_0_to_1_0;
            ScalarKeyFrameAnimation _scalarAnimation_0_to_1_1;
            SpriteVisual _spriteVisual_01;
            SpriteVisual _spriteVisual_06;
            SpriteVisual _spriteVisual_07;
            SpriteVisual _spriteVisual_08;
            SpriteVisual _spriteVisual_11;
            SpriteVisual _spriteVisual_12;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
            {
                var result = _c.CreateBooleanKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue);
                return result;
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector3KeyFrameAnimation CreateVector3KeyFrameAnimation(float initialProgress, Vector3 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector3KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // Transforms for Layer 3
            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress*0.9146342", "_", _root);
                return result;
            }

            AnimationController AnimationController_1()
            {
                if (_animationController_1 != null) { return _animationController_1; }
                var result = _animationController_1 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_1, "Progress", "_.Progress", "_", _root);
                return result;
            }

            AnimationController AnimationController_2()
            {
                if (_animationController_2 != null) { return _animationController_2; }
                var result = _animationController_2 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_2, "Progress", "_.Progress*0.9615385", "_", _root);
                return result;
            }

            // - - PreComp layer: Lock
            // Image layer: Layer 12
            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
            {
                // Frame 0.
                var result = CreateBooleanKeyFrameAnimation(0F, true);
                // Frame 21.
                result.InsertKeyFrame(0.140000001F, false);
                return result;
            }

            // - - PreComp layer: Lock
            // Image layer: Layer 16
            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
            {
                // Frame 0.
                var result = CreateBooleanKeyFrameAnimation(0F, false);
                // Frame 50.
                result.InsertKeyFrame(0.333333343F, true);
                // Frame 71.
                result.InsertKeyFrame(0.473333329F, false);
                return result;
            }

            // - - PreComp layer: Lock
            // Image layer: Layer 17
            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_2()
            {
                // Frame 0.
                var result = CreateBooleanKeyFrameAnimation(0F, false);
                // Frame 103.
                result.InsertKeyFrame(0.686666667F, true);
                // Frame 124.
                result.InsertKeyFrame(0.826666653F, false);
                return result;
            }

            // Image layer: Layer 9
            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_3()
            {
                // Frame 0.
                var result = CreateBooleanKeyFrameAnimation(0F, false);
                // Frame 12.
                result.InsertKeyFrame(0.0799999982F, true);
                return result;
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-87F, 18F));
                    builder.AddCubicBezier(new Vector2(-87F, 18F), new Vector2(-84.5F, -3F), new Vector2(-63.5F, -3F));
                    builder.AddCubicBezier(new Vector2(-42.5F, -3F), new Vector2(-39.75F, 20.5F), new Vector2(-39.75F, 19.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-83F, 18F));
                    builder.AddCubicBezier(new Vector2(-83F, 18F), new Vector2(-82.5F, 19.5F), new Vector2(-61.5F, 19.5F));
                    builder.AddCubicBezier(new Vector2(-40.5F, 19.5F), new Vector2(-39.5F, 20.5F), new Vector2(-39.5F, 19.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - -  Offset:<540, 540>
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(95F, 39F));
                    builder.AddLine(new Vector2(-43F, 39F));
                    builder.AddCubicBezier(new Vector2(-43F, 39F), new Vector2(-49F, 107F), new Vector2(24F, 107F));
                    builder.AddCubicBezier(new Vector2(97F, 107F), new Vector2(95F, 39F), new Vector2(95F, 39F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostDarkSlateGray_FF233762()
            {
                return (_colorBrush_AlmostDarkSlateGray_FF233762 == null)
                    ? _colorBrush_AlmostDarkSlateGray_FF233762 = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x23, 0x37, 0x62))
                    : _colorBrush_AlmostDarkSlateGray_FF233762;
            }

            CompositionColorBrush ColorBrush_AlmostPowderBlue_FFC5D9FF()
            {
                return (_colorBrush_AlmostPowderBlue_FFC5D9FF == null)
                    ? _colorBrush_AlmostPowderBlue_FFC5D9FF = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xC5, 0xD9, 0xFF))
                    : _colorBrush_AlmostPowderBlue_FFC5D9FF;
            }

            // Ellipse Path 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_28()
            {
                if (_ellipse_28 != null) { return _ellipse_28; }
                var result = _ellipse_28 = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(28F, 28F);
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            // Ellipse Path 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_46()
            {
                if (_ellipse_46 != null) { return _ellipse_46; }
                var result = _ellipse_46 = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(46F, 46F);
                return result;
            }

            CompositionPath Path_0()
            {
                if (_path_0 != null) { return _path_0; }
                var result = _path_0 = new CompositionPath(Geometry_0());
                return result;
            }

            CompositionPath Path_1()
            {
                if (_path_1 != null) { return _path_1; }
                var result = _path_1 = new CompositionPath(Geometry_1());
                return result;
            }

            CompositionPathGeometry PathGeometry_0()
            {
                if (_pathGeometry_0 != null) { return _pathGeometry_0; }
                var result = _pathGeometry_0 = _c.CreatePathGeometry();
                return result;
            }

            // - Layer aggregator
            // Offset:<540, 540>
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // Layer aggregator
            // Ellipse Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<953.031, 142.96696>, Scale:<0.7, 0.7>
                var geometry = Ellipse_28();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.699999988F, 0F, 0F, 0.699999988F, 953.031006F, 142.966965F), ColorBrush_AlmostPowderBlue_FFC5D9FF());;
                return result;
            }

            // Layer aggregator
            // Ellipse Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<1004, 586>, Scale:<0.3, 0.3>
                var geometry = Ellipse_28();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.300000012F, 0F, 0F, 0.300000012F, 1004F, 586F), ColorBrush_AlmostPowderBlue_FFC5D9FF());;
                return result;
            }

            // Layer aggregator
            // Ellipse Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<560, 78.000015>, Rotation:-0.011598425070025746 degrees, Scale:<0.8, 0.8>
                var geometry = Ellipse_28();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.800000012F, 0F, 0F, 0.800000012F, 560F, 78.0000153F), ColorBrush_AlmostPowderBlue_FFC5D9FF());;
                return result;
            }

            // Layer aggregator
            // Ellipse Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<232, 270.00003>, Scale:<1.3, 1.3>
                var geometry = Ellipse_28();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1.29999995F, 0F, 0F, 1.29999995F, 232F, 270.000031F), ColorBrush_AlmostPowderBlue_FFC5D9FF());;
                return result;
            }

            // Layer aggregator
            // Ellipse Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<96, 486>, Scale:<0.5, 0.5>
                var geometry = Ellipse_28();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.5F, 0F, 0F, 0.5F, 96F, 486F), ColorBrush_AlmostPowderBlue_FFC5D9FF());;
                return result;
            }

            // Layer aggregator
            // Ellipse Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<880, 383>
                if (_spriteShape_5 != null) { return _spriteShape_5; }
                var result = _spriteShape_5 = CreateSpriteShape(Ellipse_46(), new Matrix3x2(1F, 0F, 0F, 1F, 880F, 383F));;
                result.Scale = new Vector2(0F, 0F);
                result.StrokeBrush = ColorBrush_AlmostDarkSlateGray_FF233762();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeThickness = 5F;
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_6()
            {
                // Offset:<552, 516.5>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(1F, 0F, 0F, 1F, 552F, 516.5F));;
                result.StrokeBrush = ColorBrush_AlmostDarkSlateGray_FF233762();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_7()
            {
                // Offset:<694, 516.5>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(1F, 0F, 0F, 1F, 694F, 516.5F));;
                result.StrokeBrush = ColorBrush_AlmostDarkSlateGray_FF233762();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_8()
            {
                // Offset:<540, 540>
                var result = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(1F, 0F, 0F, 1F, 540F, 540F));;
                result.StrokeBrush = ColorBrush_AlmostDarkSlateGray_FF233762();
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 10F;
                return result;
            }

            // Transforms for Layer 6 Scale(1,1,0), Offset(54.031006,182.96701,0)
            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(_image_image_9);
            }

            // Transforms for Layer 3
            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(_image_image_8);
            }

            // Transforms for Layer 20 Scale(1,1,0), Offset(218.43701,379.832,0)
            CompositionSurfaceBrush SurfaceBrush_2()
            {
                return _c.CreateSurfaceBrush(_image_image_7);
            }

            // Transforms for Layer 18 Scale(1,1,0), Offset(427.7,430.871,0)
            CompositionSurfaceBrush SurfaceBrush_3()
            {
                return _c.CreateSurfaceBrush(_image_image_6);
            }

            // Transforms for Layer 15 Scale(1,1,0), Offset(0,1080,0)
            CompositionSurfaceBrush SurfaceBrush_4()
            {
                return _c.CreateSurfaceBrush(_image_image_5);
            }

            // - - PreComp layer: Lock
            // Transforms for Layer 13 Scale(1,1,0), Offset(452.05902,389.907,0)
            CompositionSurfaceBrush SurfaceBrush_5()
            {
                return _c.CreateSurfaceBrush(_image_image_4);
            }

            CompositionSurfaceBrush SurfaceBrush_6()
            {
                return (_surfaceBrush_6 == null)
                    ? _surfaceBrush_6 = _c.CreateSurfaceBrush(_image_image_3)
                    : _surfaceBrush_6;
            }

            // - - PreComp layer: Lock
            // Transforms for Layer 14 Scale(1,1,0), Offset(559.444,499.276,0)
            CompositionSurfaceBrush SurfaceBrush_7()
            {
                return _c.CreateSurfaceBrush(_image_image_2);
            }

            // Transforms for Layer 10
            CompositionSurfaceBrush SurfaceBrush_8()
            {
                return _c.CreateSurfaceBrush(_image_image_1);
            }

            // Image layer: Layer 9
            CompositionSurfaceBrush SurfaceBrush_9()
            {
                return _c.CreateSurfaceBrush(_image_image_0);
            }

            // Transforms for Lock
            ContainerVisual ContainerVisual_0()
            {
                if (_containerVisual_0 != null) { return _containerVisual_0; }
                var result = _containerVisual_0 = _c.CreateContainerVisual();
                result.CenterPoint = new Vector3(540F, 414F, 0F);
                result.Offset = new Vector3(248F, -96.1669922F, 0F);
                result.Scale = new Vector3(1F, 1F, 0F);
                result.Children.InsertAtTop(ContainerVisual_1());
                return result;
            }

            // PreComp layer: Lock
            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.Clip = InsetClip_0();
                result.Size = new Vector2(1080F, 1080F);
                var children = result.Children;
                // Transforms for Layer 13 Scale(1,1,0), Offset(452.05902,389.907,0)
                children.InsertAtTop(SpriteVisual_05());
                // Image layer: Layer 12
                children.InsertAtTop(SpriteVisual_06());
                // Image layer: Layer 16
                children.InsertAtTop(SpriteVisual_07());
                // Image layer: Layer 17
                children.InsertAtTop(SpriteVisual_08());
                // Transforms for Layer 15 Scale(1,1,0), Offset(519.274,509.024,0)
                children.InsertAtTop(SpriteVisual_09());
                // Transforms for Layer 14 Scale(1,1,0), Offset(559.444,499.276,0)
                children.InsertAtTop(SpriteVisual_10());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_0());
                // Transforms for Layer 6 Scale(1,1,0), Offset(54.031006,182.96701,0)
                children.InsertAtTop(SpriteVisual_00());
                // Transforms for Layer 3
                children.InsertAtTop(SpriteVisual_01());
                // Transforms for Layer 20 Scale(1,1,0), Offset(218.43701,379.832,0)
                children.InsertAtTop(SpriteVisual_02());
                // Transforms for Layer 18 Scale(1,1,0), Offset(427.7,430.871,0)
                children.InsertAtTop(SpriteVisual_03());
                // Transforms for Layer 15 Scale(1,1,0), Offset(0,1080,0)
                children.InsertAtTop(SpriteVisual_04());
                // PreComp layer: Lock
                children.InsertAtTop(ContainerVisual_0());
                // Transforms for Layer 10
                children.InsertAtTop(SpriteVisual_11());
                // Image layer: Layer 9
                children.InsertAtTop(SpriteVisual_12());
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0F, 1F))
                    : _cubicBezierEasingFunction_1;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return (_cubicBezierEasingFunction_2 == null)
                    ? _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F))
                    : _cubicBezierEasingFunction_2;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_3()
            {
                return (_cubicBezierEasingFunction_3 == null)
                    ? _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0F, 1F))
                    : _cubicBezierEasingFunction_3;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_4()
            {
                return (_cubicBezierEasingFunction_4 == null)
                    ? _cubicBezierEasingFunction_4 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.0700000003F, 1F))
                    : _cubicBezierEasingFunction_4;
            }

            // - PreComp layer: Lock
            InsetClip InsetClip_0()
            {
                var result = _c.CreateInsetClip();
                return result;
            }

            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path_0(), HoldThenStepEasingFunction());
                // Frame 8.25.
                result.InsertKeyFrame(0.054999996F, Path_1(), CubicBezierEasingFunction_3());
                // Frame 22.
                result.InsertKeyFrame(0.146666661F, Path_0(), CubicBezierEasingFunction_4());
                // Frame 75.
                result.InsertKeyFrame(0.49999997F, Path_0(), _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0F), new Vector2(0.666999996F, 1F)));
                // Frame 83.25.
                result.InsertKeyFrame(0.555000007F, Path_1(), CubicBezierEasingFunction_3());
                // Frame 97.
                result.InsertKeyFrame(0.646666646F, Path_0(), CubicBezierEasingFunction_4());
                return result;
            }

            // - - PreComp layer: Lock
            // Image layer: Layer 12
            // Layer opacity animation
            ScalarKeyFrameAnimation OpacityScalarAnimation_1_to_0_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 1F, HoldThenStepEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.13333334F, 0F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - PreComp layer: Lock
            // Image layer: Layer 16
            // Layer opacity animation
            ScalarKeyFrameAnimation OpacityScalarAnimation_1_to_0_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 1F, HoldThenStepEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.133333325F, 0F, CubicBezierEasingFunction_0());
                // Frame 50.
                result.InsertKeyFrame(0.333333313F, 1F, CubicBezierEasingFunction_0());
                // Frame 70.
                result.InsertKeyFrame(0.466666639F, 0F, CubicBezierEasingFunction_0());
                // Frame 103.
                result.InsertKeyFrame(0.686666667F, 1F, CubicBezierEasingFunction_0());
                // Frame 123.
                result.InsertKeyFrame(0.819999993F, 0F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - PreComp layer: Lock
            // Image layer: Layer 17
            // Layer opacity animation
            ScalarKeyFrameAnimation OpacityScalarAnimation_1_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 1F, StepThenHoldEasingFunction());
                // Frame 50.96.
                result.InsertKeyFrame(0.339743584F, 1F, HoldThenStepEasingFunction());
                // Frame 70.19.
                result.InsertKeyFrame(0.467948705F, 0F, CubicBezierEasingFunction_0());
                // Frame 99.04.
                result.InsertKeyFrame(0.660256386F, 1F, CubicBezierEasingFunction_0());
                // Frame 118.27.
                result.InsertKeyFrame(0.788461566F, 0F, CubicBezierEasingFunction_0());
                // Frame 150.
                result.InsertKeyFrame(1F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // PreComp layer: Lock
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 1.85.
                result.InsertKeyFrame(0.0122999996F, 3F, CubicBezierEasingFunction_0());
                // Frame 3.69.
                result.InsertKeyFrame(0.0246199984F, 0F, CubicBezierEasingFunction_0());
                // Frame 5.54.
                result.InsertKeyFrame(0.0369199999F, -3F, CubicBezierEasingFunction_0());
                // Frame 7.39.
                result.InsertKeyFrame(0.0492333323F, 0F, CubicBezierEasingFunction_0());
                // Frame 9.23.
                result.InsertKeyFrame(0.0615333319F, 3F, CubicBezierEasingFunction_0());
                // Frame 11.08.
                result.InsertKeyFrame(0.0738399997F, 0F, CubicBezierEasingFunction_0());
                // Frame 12.92.
                result.InsertKeyFrame(0.0861599967F, -3F, CubicBezierEasingFunction_0());
                // Frame 14.77.
                result.InsertKeyFrame(0.0984599963F, 0F, CubicBezierEasingFunction_0());
                // Frame 16.62.
                result.InsertKeyFrame(0.110773332F, 3F, CubicBezierEasingFunction_0());
                // Frame 18.46.
                result.InsertKeyFrame(0.123086661F, 0F, CubicBezierEasingFunction_0());
                // Frame 20.31.
                result.InsertKeyFrame(0.135386661F, -3F, CubicBezierEasingFunction_0());
                // Frame 22.
                result.InsertKeyFrame(0.146666661F, 0F, CubicBezierEasingFunction_0());
                // Frame 50.
                result.InsertKeyFrame(0.333333313F, 0F, CubicBezierEasingFunction_0());
                // Frame 51.85.
                result.InsertKeyFrame(0.345633328F, 3F, CubicBezierEasingFunction_0());
                // Frame 53.69.
                result.InsertKeyFrame(0.35795331F, 0F, CubicBezierEasingFunction_0());
                // Frame 55.54.
                result.InsertKeyFrame(0.370253325F, -3F, CubicBezierEasingFunction_0());
                // Frame 57.39.
                result.InsertKeyFrame(0.382566661F, 0F, CubicBezierEasingFunction_0());
                // Frame 59.23.
                result.InsertKeyFrame(0.394866645F, 3F, CubicBezierEasingFunction_0());
                // Frame 61.08.
                result.InsertKeyFrame(0.407173306F, 0F, CubicBezierEasingFunction_0());
                // Frame 62.92.
                result.InsertKeyFrame(0.419493318F, -3F, CubicBezierEasingFunction_0());
                // Frame 64.77.
                result.InsertKeyFrame(0.431793302F, 0F, CubicBezierEasingFunction_0());
                // Frame 66.62.
                result.InsertKeyFrame(0.444106638F, 3F, CubicBezierEasingFunction_0());
                // Frame 68.46.
                result.InsertKeyFrame(0.456419975F, 0F, CubicBezierEasingFunction_0());
                // Frame 70.31.
                result.InsertKeyFrame(0.468719989F, -3F, CubicBezierEasingFunction_0());
                // Frame 72.
                result.InsertKeyFrame(0.479999989F, 0F, CubicBezierEasingFunction_0());
                // Frame 103.
                result.InsertKeyFrame(0.686666667F, 0F, CubicBezierEasingFunction_0());
                // Frame 104.84.
                result.InsertKeyFrame(0.698966622F, 3F, CubicBezierEasingFunction_0());
                // Frame 106.69.
                result.InsertKeyFrame(0.711286664F, 0F, CubicBezierEasingFunction_0());
                // Frame 108.54.
                result.InsertKeyFrame(0.723586619F, -3F, CubicBezierEasingFunction_0());
                // Frame 110.39.
                result.InsertKeyFrame(0.735899985F, 0F, CubicBezierEasingFunction_0());
                // Frame 112.23.
                result.InsertKeyFrame(0.74819994F, 3F, CubicBezierEasingFunction_0());
                // Frame 114.08.
                result.InsertKeyFrame(0.76050663F, 0F, CubicBezierEasingFunction_0());
                // Frame 115.92.
                result.InsertKeyFrame(0.772826612F, -3F, CubicBezierEasingFunction_0());
                // Frame 117.77.
                result.InsertKeyFrame(0.785126626F, 0F, CubicBezierEasingFunction_0());
                // Frame 119.62.
                result.InsertKeyFrame(0.797439992F, 3F, CubicBezierEasingFunction_0());
                // Frame 121.46.
                result.InsertKeyFrame(0.809753299F, 0F, CubicBezierEasingFunction_0());
                // Frame 123.31.
                result.InsertKeyFrame(0.822053313F, -3F, CubicBezierEasingFunction_0());
                // Frame 125.
                result.InsertKeyFrame(0.833333313F, 0F, CubicBezierEasingFunction_0());
                return result;
            }

            // Scale
            ScalarKeyFrameAnimation ScalarAnimation_0_to_1_0()
            {
                // Frame 0.
                if (_scalarAnimation_0_to_1_0 != null) { return _scalarAnimation_0_to_1_0; }
                var result = _scalarAnimation_0_to_1_0 = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 25.
                result.InsertKeyFrame(0.166666672F, 1F, CubicBezierEasingFunction_1());
                return result;
            }

            // Scale
            ScalarKeyFrameAnimation ScalarAnimation_0_to_1_1()
            {
                // Frame 0.
                if (_scalarAnimation_0_to_1_1 != null) { return _scalarAnimation_0_to_1_1; }
                var result = _scalarAnimation_0_to_1_1 = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 12.
                result.InsertKeyFrame(0.0799999982F, 0F, HoldThenStepEasingFunction());
                // Frame 37.
                result.InsertKeyFrame(0.24666667F, 1F, CubicBezierEasingFunction_1());
                return result;
            }

            // - - Layer aggregator
            // - Layer: Shape Layer 1
            // Ellipse Path 1.EllipseGeometry
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 25.
                result.InsertKeyFrame(0.166666657F, 0F, HoldThenStepEasingFunction());
                // Frame 48.74.
                result.InsertKeyFrame(0.324966639F, 0.289999992F, CubicBezierEasingFunction_2());
                // Frame 73.81.
                result.InsertKeyFrame(0.492059976F, 0F, CubicBezierEasingFunction_2());
                // Frame 100.19.
                result.InsertKeyFrame(0.667939961F, 0F, CubicBezierEasingFunction_2());
                // Frame 123.94.
                result.InsertKeyFrame(0.826239944F, 0.289999992F, CubicBezierEasingFunction_2());
                // Frame 149.
                result.InsertKeyFrame(0.99333334F, 0F, CubicBezierEasingFunction_2());
                return result;
            }

            // - - Layer aggregator
            // - Layer: Shape Layer 1
            // Ellipse Path 1.EllipseGeometry
            // TrimOffset
            ScalarKeyFrameAnimation TrimOffsetScalarAnimation_m0p139_to_0p831()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, -0.138888896F, StepThenHoldEasingFunction());
                // Frame 25.
                result.InsertKeyFrame(0.166666657F, -0.138888896F, HoldThenStepEasingFunction());
                // Frame 48.74.
                result.InsertKeyFrame(0.324966639F, 0.213888884F, CubicBezierEasingFunction_2());
                // Frame 73.81.
                result.InsertKeyFrame(0.492059976F, 0.830555558F, CubicBezierEasingFunction_2());
                // Frame 100.19.
                result.InsertKeyFrame(0.667939961F, -0.138888896F, CubicBezierEasingFunction_2());
                // Frame 123.94.
                result.InsertKeyFrame(0.826239944F, 0.213888884F, CubicBezierEasingFunction_2());
                // Frame 149.
                result.InsertKeyFrame(0.99333334F, 0.830555558F, CubicBezierEasingFunction_2());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(1080F, 1080F);
                var shapes = result.Shapes;
                // Scale:0.7,0.7, Offset:<513.031, 376.96698>
                shapes.Add(SpriteShape_0());
                // Scale:0.3,0.3, Offset:<564, 820>
                shapes.Add(SpriteShape_1());
                // Scale:0.8,0.8, Offset:<120, 312>
                shapes.Add(SpriteShape_2());
                // Scale:1.3,1.3, Offset:<-208, 504>
                shapes.Add(SpriteShape_3());
                // Scale:0.5,0.5, Offset:<-344, 720>
                shapes.Add(SpriteShape_4());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(1080F, 1080F);
                var shapes = result.Shapes;
                // Layer: Shape Layer 1
                shapes.Add(SpriteShape_5());
                // Offset:<552, 516.5>
                shapes.Add(SpriteShape_6());
                // Offset:<694, 516.5>
                shapes.Add(SpriteShape_7());
                // Offset:<540, 540>
                shapes.Add(SpriteShape_8());
                return result;
            }

            // Transforms for Layer 6 Scale(1,1,0), Offset(54.031006,182.96701,0)
            SpriteVisual SpriteVisual_00()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(939F, 640F);
                // Offset:<54.031006, 182.96701>, Scale:<1, 1>
                result.TransformMatrix = new Matrix4x4(1F, 0F, 0F, 0F, 0F, 1F, 0F, 0F, 0F, 0F, 0F, 0F, 54.0310059F, 182.96701F, 0F, 1F);
                result.Brush = SurfaceBrush_0();
                return result;
            }

            // Transforms for Layer 3
            SpriteVisual SpriteVisual_01()
            {
                if (_spriteVisual_01 != null) { return _spriteVisual_01; }
                var result = _spriteVisual_01 = _c.CreateSpriteVisual();
                result.CenterPoint = new Vector3(393.065002F, 2.50099993F, 0F);
                result.Offset = new Vector3(171.067993F, 820.088013F, 0F);
                result.Size = new Vector2(787F, 6F);
                result.Brush = SurfaceBrush_1();
                return result;
            }

            // Transforms for Layer 20 Scale(1,1,0), Offset(218.43701,379.832,0)
            SpriteVisual SpriteVisual_02()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(690F, 445F);
                // Offset:<218.43701, 379.832>, Scale:<1, 1>
                result.TransformMatrix = new Matrix4x4(1F, 0F, 0F, 0F, 0F, 1F, 0F, 0F, 0F, 0F, 0F, 0F, 218.437012F, 379.832001F, 0F, 1F);
                result.Brush = SurfaceBrush_2();
                return result;
            }

            // Transforms for Layer 18 Scale(1,1,0), Offset(427.7,430.871,0)
            SpriteVisual SpriteVisual_03()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(384F, 4F);
                // Offset:<427.7, 430.871>, Scale:<1, 1>
                result.TransformMatrix = new Matrix4x4(1F, 0F, 0F, 0F, 0F, 1F, 0F, 0F, 0F, 0F, 0F, 0F, 427.700012F, 430.871002F, 0F, 1F);
                result.Brush = SurfaceBrush_3();
                return result;
            }

            // Transforms for Layer 15 Scale(1,1,0), Offset(0,1080,0)
            SpriteVisual SpriteVisual_04()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(1F, 1F);
                // Offset:<0, 1080>, Scale:<1, 1>
                result.TransformMatrix = new Matrix4x4(1F, 0F, 0F, 0F, 0F, 1F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 1080F, 0F, 1F);
                result.Brush = SurfaceBrush_4();
                return result;
            }

            // - PreComp layer: Lock
            // Transforms for Layer 13 Scale(1,1,0), Offset(452.05902,389.907,0)
            SpriteVisual SpriteVisual_05()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(174F, 224F);
                // Offset:<452.05902, 389.907>, Scale:<1, 1>
                result.TransformMatrix = new Matrix4x4(1F, 0F, 0F, 0F, 0F, 1F, 0F, 0F, 0F, 0F, 0F, 0F, 452.059021F, 389.907013F, 0F, 1F);
                result.Brush = SurfaceBrush_5();
                return result;
            }

            // - PreComp layer: Lock
            // Transforms for Layer 12
            SpriteVisual SpriteVisual_06()
            {
                if (_spriteVisual_06 != null) { return _spriteVisual_06; }
                var result = _spriteVisual_06 = _c.CreateSpriteVisual();
                result.CenterPoint = new Vector3(20.4209995F, 32.9840012F, 0F);
                result.Offset = new Vector3(519.273987F, 509.023987F, 0F);
                result.Size = new Vector2(41F, 66F);
                result.Brush = SurfaceBrush_6();
                return result;
            }

            // - PreComp layer: Lock
            // Transforms for Layer 16
            SpriteVisual SpriteVisual_07()
            {
                if (_spriteVisual_07 != null) { return _spriteVisual_07; }
                var result = _spriteVisual_07 = _c.CreateSpriteVisual();
                result.CenterPoint = new Vector3(20.4209995F, 32.9840012F, 0F);
                result.IsVisible = false;
                result.Offset = new Vector3(519.273987F, 509.023987F, 0F);
                result.Size = new Vector2(41F, 66F);
                result.Brush = SurfaceBrush_6();
                return result;
            }

            // - PreComp layer: Lock
            // Transforms for Layer 17
            SpriteVisual SpriteVisual_08()
            {
                if (_spriteVisual_08 != null) { return _spriteVisual_08; }
                var result = _spriteVisual_08 = _c.CreateSpriteVisual();
                result.CenterPoint = new Vector3(20.4209995F, 32.9840012F, 0F);
                result.IsVisible = false;
                result.Offset = new Vector3(519.273987F, 509.023987F, 0F);
                result.Size = new Vector2(41F, 66F);
                result.Brush = SurfaceBrush_6();
                return result;
            }

            // - PreComp layer: Lock
            // Transforms for Layer 15 Scale(1,1,0), Offset(519.274,509.024,0)
            SpriteVisual SpriteVisual_09()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(41F, 66F);
                // Offset:<519.274, 509.024>, Scale:<1, 1>
                result.TransformMatrix = new Matrix4x4(1F, 0F, 0F, 0F, 0F, 1F, 0F, 0F, 0F, 0F, 0F, 0F, 519.273987F, 509.023987F, 0F, 1F);
                result.Brush = SurfaceBrush_6();
                return result;
            }

            // - PreComp layer: Lock
            // Transforms for Layer 14 Scale(1,1,0), Offset(559.444,499.276,0)
            SpriteVisual SpriteVisual_10()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(69F, 116F);
                // Offset:<559.444, 499.276>, Scale:<1, 1>
                result.TransformMatrix = new Matrix4x4(1F, 0F, 0F, 0F, 0F, 1F, 0F, 0F, 0F, 0F, 0F, 0F, 559.44397F, 499.276001F, 0F, 1F);
                result.Brush = SurfaceBrush_7();
                return result;
            }

            // Transforms for Layer 10
            SpriteVisual SpriteVisual_11()
            {
                if (_spriteVisual_11 != null) { return _spriteVisual_11; }
                var result = _spriteVisual_11 = _c.CreateSpriteVisual();
                result.CenterPoint = new Vector3(32.743F, 32.7439995F, 0F);
                result.Offset = new Vector3(846.957031F, 350.559998F, 0F);
                result.Size = new Vector2(66F, 66F);
                result.Brush = SurfaceBrush_8();
                return result;
            }

            // Transforms for Layer 9
            SpriteVisual SpriteVisual_12()
            {
                if (_spriteVisual_12 != null) { return _spriteVisual_12; }
                var result = _spriteVisual_12 = _c.CreateSpriteVisual();
                result.CenterPoint = new Vector3(4.52199984F, 17.257F, 0F);
                result.IsVisible = false;
                result.Offset = new Vector3(874.692017F, 366.71402F, 0F);
                result.Size = new Vector2(10F, 35F);
                result.Brush = SurfaceBrush_9();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                if (_stepThenHoldEasingFunction != null) { return _stepThenHoldEasingFunction; }
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - Layer aggregator
            // Layer: Shape Layer 1
            Vector2KeyFrameAnimation ShapeVisibilityAnimation()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), HoldThenStepEasingFunction());
                // Frame 25.
                result.InsertKeyFrame(0.166666672F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                return result;
            }

            // Transforms for Layer 3
            // Scale
            Vector3KeyFrameAnimation ScaleVector3Animation_0()
            {
                // Frame 0.
                var result = CreateVector3KeyFrameAnimation(0F, new Vector3(1F, 1F, 1F), HoldThenStepEasingFunction());
                // Frame 34.88.
                result.InsertKeyFrame(0.23252438F, new Vector3(1.26999998F, 1F, 1F), CubicBezierEasingFunction_0());
                // Frame 67.44.
                result.InsertKeyFrame(0.44956705F, new Vector3(1F, 1F, 1F), CubicBezierEasingFunction_0());
                // Frame 102.32.
                result.InsertKeyFrame(0.682109714F, new Vector3(1.26999998F, 1F, 1F), CubicBezierEasingFunction_0());
                // Frame 137.2.
                result.InsertKeyFrame(0.914634109F, new Vector3(1F, 1F, 1F), CubicBezierEasingFunction_0());
                // Frame 150.
                result.InsertKeyFrame(1F, new Vector3(1.26999998F, 1F, 1F), CubicBezierEasingFunction_0());
                return result;
            }

            // - - PreComp layer: Lock
            // Image layer: Layer 12
            // Scale
            Vector3KeyFrameAnimation ScaleVector3Animation_1()
            {
                // Frame 0.
                var result = CreateVector3KeyFrameAnimation(0F, new Vector3(1F, 1F, 1F), HoldThenStepEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.13333334F, new Vector3(1.88999999F, 1.88999999F, 1F), CubicBezierEasingFunction_0());
                return result;
            }

            // - - PreComp layer: Lock
            // Image layer: Layer 16
            // Scale
            Vector3KeyFrameAnimation ScaleVector3Animation_2()
            {
                // Frame 0.
                var result = CreateVector3KeyFrameAnimation(0F, new Vector3(1F, 1F, 1F), HoldThenStepEasingFunction());
                // Frame 20.
                result.InsertKeyFrame(0.133333325F, new Vector3(1.88999999F, 1.88999999F, 1F), CubicBezierEasingFunction_0());
                // Frame 50.
                result.InsertKeyFrame(0.333333313F, new Vector3(1F, 1F, 1F), CubicBezierEasingFunction_0());
                // Frame 70.
                result.InsertKeyFrame(0.466666639F, new Vector3(1.88999999F, 1.88999999F, 1F), CubicBezierEasingFunction_0());
                // Frame 103.
                result.InsertKeyFrame(0.686666667F, new Vector3(1F, 1F, 1F), CubicBezierEasingFunction_0());
                // Frame 123.
                result.InsertKeyFrame(0.819999993F, new Vector3(1.88999999F, 1.88999999F, 1F), CubicBezierEasingFunction_0());
                return result;
            }

            // - - PreComp layer: Lock
            // Image layer: Layer 17
            // Scale
            Vector3KeyFrameAnimation ScaleVector3Animation_3()
            {
                // Frame 0.
                var result = CreateVector3KeyFrameAnimation(0F, new Vector3(1F, 1F, 1F), StepThenHoldEasingFunction());
                // Frame 50.96.
                result.InsertKeyFrame(0.339743584F, new Vector3(1F, 1F, 1F), HoldThenStepEasingFunction());
                // Frame 70.19.
                result.InsertKeyFrame(0.467948705F, new Vector3(1.88999999F, 1.88999999F, 1F), CubicBezierEasingFunction_0());
                // Frame 99.04.
                result.InsertKeyFrame(0.660256386F, new Vector3(1F, 1F, 1F), CubicBezierEasingFunction_0());
                // Frame 118.27.
                result.InsertKeyFrame(0.788461566F, new Vector3(1.88999999F, 1.88999999F, 1F), CubicBezierEasingFunction_0());
                // Frame 150.
                result.InsertKeyFrame(1F, new Vector3(1F, 1F, 1F), CubicBezierEasingFunction_0());
                return result;
            }

            internal RegisterAnimation_AnimatedVisual(
                Compositor compositor,
                LoadedImageSurface image_image_0,
                LoadedImageSurface image_image_1,
                LoadedImageSurface image_image_2,
                LoadedImageSurface image_image_3,
                LoadedImageSurface image_image_4,
                LoadedImageSurface image_image_5,
                LoadedImageSurface image_image_6,
                LoadedImageSurface image_image_7,
                LoadedImageSurface image_image_8,
                LoadedImageSurface image_image_9
                )
            {
                _c = compositor;
                _image_image_0 = image_image_0;
                _image_image_1 = image_image_1;
                _image_image_2 = image_image_2;
                _image_image_3 = image_image_3;
                _image_image_4 = image_image_4;
                _image_image_5 = image_image_5;
                _image_image_6 = image_image_6;
                _image_image_7 = image_image_7;
                _image_image_8 = image_image_8;
                _image_image_9 = image_image_9;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(1080F, 1080F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _ellipse_46.StartAnimation("TrimEnd", TrimEndScalarAnimation_0_to_0(), AnimationController_1());
                _ellipse_46.StartAnimation("TrimOffset", TrimOffsetScalarAnimation_m0p139_to_0p831(), AnimationController_1());
                _pathGeometry_0.StartAnimation("Path", PathKeyFrameAnimation_0(), AnimationController_1());
                _spriteShape_5.StartAnimation("Scale", ShapeVisibilityAnimation(), AnimationController_1());
                _containerVisual_0.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), AnimationController_1());
                _spriteVisual_01.StartAnimation("Scale", ScaleVector3Animation_0(), AnimationController_0());
                _spriteVisual_06.StartAnimation("Scale", ScaleVector3Animation_1(), AnimationController_1());
                _spriteVisual_06.StartAnimation("IsVisible", IsVisibleBooleanAnimation_0(), AnimationController_1());
                _spriteVisual_06.StartAnimation("Opacity", OpacityScalarAnimation_1_to_0_0(), AnimationController_1());
                _spriteVisual_07.StartAnimation("Scale", ScaleVector3Animation_2(), AnimationController_1());
                _spriteVisual_07.StartAnimation("IsVisible", IsVisibleBooleanAnimation_1(), AnimationController_1());
                _spriteVisual_07.StartAnimation("Opacity", OpacityScalarAnimation_1_to_0_1(), AnimationController_1());
                _spriteVisual_08.StartAnimation("Scale", ScaleVector3Animation_3(), AnimationController_2());
                _spriteVisual_08.StartAnimation("IsVisible", IsVisibleBooleanAnimation_2(), AnimationController_1());
                _spriteVisual_08.StartAnimation("Opacity", OpacityScalarAnimation_1_to_1(), AnimationController_2());
                _spriteVisual_11.StartAnimation("Scale.X", ScalarAnimation_0_to_1_0(), AnimationController_1());
                _spriteVisual_11.StartAnimation("Scale.Y", ScalarAnimation_0_to_1_0(), AnimationController_1());
                _spriteVisual_12.StartAnimation("Scale.X", ScalarAnimation_0_to_1_1(), AnimationController_1());
                _spriteVisual_12.StartAnimation("Scale.Y", ScalarAnimation_0_to_1_1(), AnimationController_1());
                _spriteVisual_12.StartAnimation("IsVisible", IsVisibleBooleanAnimation_3(), AnimationController_1());
            }

            public void DestroyAnimations()
            {
                _ellipse_46.StopAnimation("TrimEnd");
                _ellipse_46.StopAnimation("TrimOffset");
                _pathGeometry_0.StopAnimation("Path");
                _spriteShape_5.StopAnimation("Scale");
                _containerVisual_0.StopAnimation("RotationAngleInDegrees");
                _spriteVisual_01.StopAnimation("Scale");
                _spriteVisual_06.StopAnimation("Scale");
                _spriteVisual_06.StopAnimation("IsVisible");
                _spriteVisual_06.StopAnimation("Opacity");
                _spriteVisual_07.StopAnimation("Scale");
                _spriteVisual_07.StopAnimation("IsVisible");
                _spriteVisual_07.StopAnimation("Opacity");
                _spriteVisual_08.StopAnimation("Scale");
                _spriteVisual_08.StopAnimation("IsVisible");
                _spriteVisual_08.StopAnimation("Opacity");
                _spriteVisual_11.StopAnimation("Scale.X");
                _spriteVisual_11.StopAnimation("Scale.Y");
                _spriteVisual_12.StopAnimation("Scale.X");
                _spriteVisual_12.StopAnimation("Scale.Y");
                _spriteVisual_12.StopAnimation("IsVisible");
            }

        }
    }
}

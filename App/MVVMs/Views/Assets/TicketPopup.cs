//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.1.240821.1+077322fa26
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile TicketPopup.json
//       
//       Input file:
//           TicketPopup.json (40011 bytes created 10:21+07:00 Sep 19 2024)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    96 |
// |--------------------------+-------|
// | Expression animators     |     3 |
// | KeyFrame animators       |     6 |
// | Reference parameters     |     3 |
// | Expression operations    |     4 |
// |--------------------------+-------|
// | Animated brushes         |     1 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     3 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     2 |
// |--------------------------+-------|
// | ContainerShapes          |     1 |
// | CompositionSpriteShapes  |    13 |
// |--------------------------+-------|
// | Brushes                  |     3 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Media;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Numerics;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        Main Scene
    // Frame rate:  100 fps
    // Frame count: 300
    // Duration:    3000.0 mS
    public sealed class TicketPopup
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
        , Microsoft.UI.Xaml.Controls.IDynamicAnimatedVisualSource
        , INotifyPropertyChanged
    {
        const int c_loadedImageSurfaceCount = 1;
        int _loadCompleteEventCount;
        bool _isImageLoadingAsynchronous;
        bool _isTryCreateAnimatedVisualCalled;
        bool _isImageLoadingStarted;
        HashSet<TypedEventHandler<IDynamicAnimatedVisualSource, object>> _animatedVisualInvalidatedEventTokenTable = new HashSet<TypedEventHandler<IDynamicAnimatedVisualSource, object>>();
        LoadedImageSurface _image_0;

        // Animation duration: 3.000 seconds.
        internal const long c_durationTicks = 30000000;

        /// <summary>
        /// This implementation of the INotifyPropertyChanged.PropertyChanged event is specific
        /// to C# and does not work on WinRT.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        public event TypedEventHandler<IDynamicAnimatedVisualSource, object> AnimatedVisualInvalidated
        {
            add
            {
                _animatedVisualInvalidatedEventTokenTable.Add(value);
            }
            remove
            {
                _animatedVisualInvalidatedEventTokenTable.Remove(value);
            }
        }

        /// <summary>
        /// If this property is set to true, <see cref="TryCreateAnimatedVisual"/> will return
        /// null until all images have loaded. When all images have loaded,
        /// <see cref="TryCreateAnimatedVisual"/> will return the AnimatedVisual. To use, set
        /// it when instantiating the AnimatedVisualSource. Once
        /// <see cref="TryCreateAnimatedVisual"/> is called, changes made to this property will
        /// be ignored. Default value is false.
        /// </summary>
        public bool IsImageLoadingAsynchronous
        {
            get { return _isImageLoadingAsynchronous; }
            set
            {
                if (!_isTryCreateAnimatedVisualCalled && _isImageLoadingAsynchronous != value)
                {
                    _isImageLoadingAsynchronous = value;
                    NotifyPropertyChanged(nameof(IsImageLoadingAsynchronous));
                }
            }
        }

        /// <summary>
        /// Returns true if all images have finished loading.
        /// </summary>
        public bool IsImageLoadingCompleted { get; private set; }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            _isTryCreateAnimatedVisualCalled = true;
            diagnostics = null;

            EnsureImageLoadingStarted();

            if (_isImageLoadingAsynchronous && _loadCompleteEventCount != c_loadedImageSurfaceCount)
            {
                return null;
            }

            var res = 
                new TicketPopup_AnimatedVisual(
                    compositor,
                    _image_0
                    );
                res.CreateAnimations();
                return res;
        }
        void EnsureImageLoadingStarted()
        {
            if (!_isImageLoadingStarted)
            {
                var eventHandler = new TypedEventHandler<LoadedImageSurface, LoadedImageSourceLoadCompletedEventArgs>(HandleLoadCompleted);
                _image_0 = LoadedImageSurface.StartLoadFromStream(Convert.FromBase64String(s_Image_0_Bytes_base64).AsBuffer().AsStream().AsRandomAccessStream());
                _image_0.LoadCompleted += eventHandler;
                _isImageLoadingStarted = true;
            }
        }

        void HandleLoadCompleted(LoadedImageSurface sender, LoadedImageSourceLoadCompletedEventArgs e)
        {
            _loadCompleteEventCount++;
            sender.LoadCompleted -= HandleLoadCompleted;

            if (_loadCompleteEventCount == c_loadedImageSurfaceCount)
            {
                IsImageLoadingCompleted = true;
                NotifyPropertyChanged(nameof(IsImageLoadingCompleted));
                if (_isImageLoadingAsynchronous)
                {
                    foreach (var v in _animatedVisualInvalidatedEventTokenTable) v.Invoke(this, null);
                }
            }
        }

        void NotifyPropertyChanged(string name)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }


        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 300d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 100d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(30000000);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 300d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        // Image: "0" png 512x512.
        static readonly string s_Image_0_Bytes_base64 = 
        "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" +
        "5ErkJggg=="
        ;

        sealed class TicketPopup_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 30000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly LoadedImageSurface _image_0;
            AnimationController _animationController_0;
            CompositionColorBrush _animatedColorBrush_Transparent_to_Black;
            CompositionContainerShape _containerShape;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            CompositionRoundedRectangleGeometry _roundedRectangle;
            CompositionSpriteShape _spriteShape_12;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            SpriteVisual _spriteVisual_0;
            StepEasingFunction _holdThenStepEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ColorKeyFrameAnimation CreateColorKeyFrameAnimation(float initialProgress, Color initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InterpolationColorSpace = CompositionColorSpace.Rgb;
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector3KeyFrameAnimation CreateVector3KeyFrameAnimation(float initialProgress, Vector3 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector3KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            CanvasGeometry Geometry_00()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(548F, -2048F));
                    builder.AddLine(new Vector2(548F, 0F));
                    builder.AddLine(new Vector2(186F, 0F));
                    builder.AddLine(new Vector2(186F, -2048F));
                    builder.AddLine(new Vector2(548F, -2048F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_01()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(866F, 30F));
                    builder.AddCubicBezier(new Vector2(712F, 30F), new Vector2(579.166687F, -2.16666675F), new Vector2(467.5F, -66.5F));
                    builder.AddCubicBezier(new Vector2(355.833344F, -130.833328F), new Vector2(270F, -222.166672F), new Vector2(210F, -340.5F));
                    builder.AddCubicBezier(new Vector2(150F, -458.833344F), new Vector2(120F, -598.333313F), new Vector2(120F, -759F));
                    builder.AddCubicBezier(new Vector2(120F, -917F), new Vector2(150.166672F, -1055.83337F), new Vector2(210.5F, -1175.5F));
                    builder.AddCubicBezier(new Vector2(270.833344F, -1295.16663F), new Vector2(355.333344F, -1388.5F), new Vector2(464F, -1455.5F));
                    builder.AddCubicBezier(new Vector2(572.666687F, -1522.5F), new Vector2(700.333313F, -1556F), new Vector2(847F, -1556F));
                    builder.AddCubicBezier(new Vector2(941.666687F, -1556F), new Vector2(1031.16663F, -1540.83337F), new Vector2(1115.5F, -1510.5F));
                    builder.AddCubicBezier(new Vector2(1199.83337F, -1480.16663F), new Vector2(1274.5F, -1433.33337F), new Vector2(1339.5F, -1370F));
                    builder.AddCubicBezier(new Vector2(1404.5F, -1306.66663F), new Vector2(1455.66663F, -1226.16663F), new Vector2(1493F, -1128.5F));
                    builder.AddCubicBezier(new Vector2(1530.33337F, -1030.83337F), new Vector2(1549F, -914.666687F), new Vector2(1549F, -780F));
                    builder.AddLine(new Vector2(1549F, -669F));
                    builder.AddLine(new Vector2(290F, -669F));
                    builder.AddLine(new Vector2(290F, -913F));
                    builder.AddLine(new Vector2(1202F, -913F));
                    builder.AddCubicBezier(new Vector2(1201.33337F, -982.333313F), new Vector2(1186.33337F, -1044.16663F), new Vector2(1157F, -1098.5F));
                    builder.AddCubicBezier(new Vector2(1127.66663F, -1152.83337F), new Vector2(1086.83337F, -1195.66663F), new Vector2(1034.5F, -1227F));
                    builder.AddCubicBezier(new Vector2(982.166687F, -1258.33337F), new Vector2(921.333313F, -1274F), new Vector2(852F, -1274F));
                    builder.AddCubicBezier(new Vector2(778F, -1274F), new Vector2(713F, -1256.16663F), new Vector2(657F, -1220.5F));
                    builder.AddCubicBezier(new Vector2(601F, -1184.83337F), new Vector2(557.5F, -1138.16663F), new Vector2(526.5F, -1080.5F));
                    builder.AddCubicBezier(new Vector2(495.5F, -1022.83331F), new Vector2(479.666656F, -959.666687F), new Vector2(479F, -891F));
                    builder.AddLine(new Vector2(479F, -678F));
                    builder.AddCubicBezier(new Vector2(479F, -588.666687F), new Vector2(495.333344F, -512.166687F), new Vector2(528F, -448.5F));
                    builder.AddCubicBezier(new Vector2(560.666687F, -384.833344F), new Vector2(606.333313F, -336.166656F), new Vector2(665F, -302.5F));
                    builder.AddCubicBezier(new Vector2(723.666687F, -268.833344F), new Vector2(792.333313F, -252F), new Vector2(871F, -252F));
                    builder.AddCubicBezier(new Vector2(923.666687F, -252F), new Vector2(971.333313F, -259.5F), new Vector2(1014F, -274.5F));
                    builder.AddCubicBezier(new Vector2(1056.66663F, -289.5F), new Vector2(1093.66663F, -311.666656F), new Vector2(1125F, -341F));
                    builder.AddCubicBezier(new Vector2(1156.33337F, -370.333344F), new Vector2(1180F, -406.666656F), new Vector2(1196F, -450F));
                    builder.AddLine(new Vector2(1534F, -412F));
                    builder.AddCubicBezier(new Vector2(1512.66663F, -322.666656F), new Vector2(1472.16663F, -244.833328F), new Vector2(1412.5F, -178.5F));
                    builder.AddCubicBezier(new Vector2(1352.83337F, -112.166664F), new Vector2(1276.66663F, -60.8333321F), new Vector2(1184F, -24.5F));
                    builder.AddCubicBezier(new Vector2(1091.33337F, 11.833333F), new Vector2(985.333313F, 30F), new Vector2(866F, 30F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - Transforms: TicketResell
            // - - ShapeGroup: Group 36 Scale:0.017045455,0.017045455,
            // Offset:<62.420456, 17.454546>
            CanvasGeometry Geometry_02()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(1400F, -1130F));
                    builder.AddLine(new Vector2(1070F, -1094F));
                    builder.AddCubicBezier(new Vector2(1060.66663F, -1127.33337F), new Vector2(1044.5F, -1158.66663F), new Vector2(1021.5F, -1188F));
                    builder.AddCubicBezier(new Vector2(998.5F, -1217.33337F), new Vector2(967.666687F, -1241F), new Vector2(929F, -1259F));
                    builder.AddCubicBezier(new Vector2(890.333313F, -1277F), new Vector2(843F, -1286F), new Vector2(787F, -1286F));
                    builder.AddCubicBezier(new Vector2(711.666687F, -1286F), new Vector2(648.5F, -1269.66663F), new Vector2(597.5F, -1237F));
                    builder.AddCubicBezier(new Vector2(546.5F, -1204.33337F), new Vector2(521.333313F, -1162F), new Vector2(522F, -1110F));
                    builder.AddCubicBezier(new Vector2(521.333313F, -1065.33337F), new Vector2(537.833313F, -1029F), new Vector2(571.5F, -1001F));
                    builder.AddCubicBezier(new Vector2(605.166687F, -973F), new Vector2(661F, -950F), new Vector2(739F, -932F));
                    builder.AddLine(new Vector2(1001F, -876F));
                    builder.AddCubicBezier(new Vector2(1146.33337F, -844.666687F), new Vector2(1254.5F, -795F), new Vector2(1325.5F, -727F));
                    builder.AddCubicBezier(new Vector2(1396.5F, -659F), new Vector2(1432.33337F, -570F), new Vector2(1433F, -460F));
                    builder.AddCubicBezier(new Vector2(1432.33337F, -363.333344F), new Vector2(1404.16663F, -278.166656F), new Vector2(1348.5F, -204.5F));
                    builder.AddCubicBezier(new Vector2(1292.83337F, -130.833328F), new Vector2(1215.66663F, -73.3333359F), new Vector2(1117F, -32F));
                    builder.AddCubicBezier(new Vector2(1018.33331F, 9.33333302F), new Vector2(905F, 30F), new Vector2(777F, 30F));
                    builder.AddCubicBezier(new Vector2(589F, 30F), new Vector2(437.666656F, -9.5F), new Vector2(323F, -88.5F));
                    builder.AddCubicBezier(new Vector2(208.333328F, -167.5F), new Vector2(140F, -277.666656F), new Vector2(118F, -419F));
                    builder.AddLine(new Vector2(471F, -453F));
                    builder.AddCubicBezier(new Vector2(487F, -383.666656F), new Vector2(521F, -331.333344F), new Vector2(573F, -296F));
                    builder.AddCubicBezier(new Vector2(625F, -260.666656F), new Vector2(692.666687F, -243F), new Vector2(776F, -243F));
                    builder.AddCubicBezier(new Vector2(862F, -243F), new Vector2(931.166687F, -260.666656F), new Vector2(983.5F, -296F));
                    builder.AddCubicBezier(new Vector2(1035.83337F, -331.333344F), new Vector2(1062F, -375F), new Vector2(1062F, -427F));
                    builder.AddCubicBezier(new Vector2(1062F, -471F), new Vector2(1045.16663F, -507.333344F), new Vector2(1011.5F, -536F));
                    builder.AddCubicBezier(new Vector2(977.833313F, -564.666687F), new Vector2(925.666687F, -586.666687F), new Vector2(855F, -602F));
                    builder.AddLine(new Vector2(593F, -657F));
                    builder.AddCubicBezier(new Vector2(445.666656F, -687.666687F), new Vector2(336.666656F, -739.5F), new Vector2(266F, -812.5F));
                    builder.AddCubicBezier(new Vector2(195.333328F, -885.5F), new Vector2(160.333328F, -978F), new Vector2(161F, -1090F));
                    builder.AddCubicBezier(new Vector2(160.333328F, -1184.66663F), new Vector2(186.166672F, -1266.83337F), new Vector2(238.5F, -1336.5F));
                    builder.AddCubicBezier(new Vector2(290.833344F, -1406.16663F), new Vector2(363.833344F, -1460.16663F), new Vector2(457.5F, -1498.5F));
                    builder.AddCubicBezier(new Vector2(551.166687F, -1536.83337F), new Vector2(659.333313F, -1556F), new Vector2(782F, -1556F));
                    builder.AddCubicBezier(new Vector2(962F, -1556F), new Vector2(1103.83337F, -1517.66663F), new Vector2(1207.5F, -1441F));
                    builder.AddCubicBezier(new Vector2(1311.16663F, -1364.33337F), new Vector2(1375.33337F, -1260.66663F), new Vector2(1400F, -1130F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - Transforms: TicketResell
            // - - ShapeGroup: Group 34 Scale:0.017045455,0.017045455,
            // Offset:<3.1295455, 17.454546>
            // - Path 34+Path 33.PathGeometry
            CanvasGeometry Geometry_03()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_04(), Geometry_05() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - Transforms: TicketResell
            // - - - ShapeGroup: Group 34 Scale:0.017045455,0.017045455,
            // Offset:<3.1295455, 17.454546>
            // - - Path 34+Path 33.PathGeometry
            CanvasGeometry Geometry_04()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(1260F, -928F));
                    builder.AddLine(new Vector2(1767F, 0F));
                    builder.AddLine(new Vector2(1353F, 0F));
                    builder.AddLine(new Vector2(855F, -928F));
                    builder.AddLine(new Vector2(1260F, -928F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - Transforms: TicketResell
            // - - - ShapeGroup: Group 34 Scale:0.017045455,0.017045455,
            // Offset:<3.1295455, 17.454546>
            // - - Path 34+Path 33.PathGeometry
            CanvasGeometry Geometry_05()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(202F, 0F));
                    builder.AddLine(new Vector2(202F, -2048F));
                    builder.AddLine(new Vector2(970F, -2048F));
                    builder.AddCubicBezier(new Vector2(1127.33337F, -2048F), new Vector2(1259.5F, -2020.66663F), new Vector2(1366.5F, -1966F));
                    builder.AddCubicBezier(new Vector2(1473.5F, -1911.33337F), new Vector2(1554.5F, -1834.83337F), new Vector2(1609.5F, -1736.5F));
                    builder.AddCubicBezier(new Vector2(1664.5F, -1638.16663F), new Vector2(1692F, -1523.66663F), new Vector2(1692F, -1393F));
                    builder.AddCubicBezier(new Vector2(1692F, -1261.66663F), new Vector2(1664.16663F, -1147.83337F), new Vector2(1608.5F, -1051.5F));
                    builder.AddCubicBezier(new Vector2(1552.83337F, -955.166687F), new Vector2(1471F, -880.833313F), new Vector2(1363F, -828.5F));
                    builder.AddCubicBezier(new Vector2(1255F, -776.166687F), new Vector2(1122.33337F, -750F), new Vector2(965F, -750F));
                    builder.AddLine(new Vector2(418F, -750F));
                    builder.AddLine(new Vector2(418F, -1058F));
                    builder.AddLine(new Vector2(915F, -1058F));
                    builder.AddCubicBezier(new Vector2(1007F, -1058F), new Vector2(1082.33337F, -1070.83337F), new Vector2(1141F, -1096.5F));
                    builder.AddCubicBezier(new Vector2(1199.66663F, -1122.16663F), new Vector2(1243.16663F, -1159.83337F), new Vector2(1271.5F, -1209.5F));
                    builder.AddCubicBezier(new Vector2(1299.83337F, -1259.16663F), new Vector2(1314F, -1320.33337F), new Vector2(1314F, -1393F));
                    builder.AddCubicBezier(new Vector2(1314F, -1465.66663F), new Vector2(1299.66663F, -1527.83337F), new Vector2(1271F, -1579.5F));
                    builder.AddCubicBezier(new Vector2(1242.33337F, -1631.16663F), new Vector2(1198.66663F, -1670.5F), new Vector2(1140F, -1697.5F));
                    builder.AddCubicBezier(new Vector2(1081.33337F, -1724.5F), new Vector2(1005.66669F, -1738F), new Vector2(913F, -1738F));
                    builder.AddLine(new Vector2(573F, -1738F));
                    builder.AddLine(new Vector2(573F, 0F));
                    builder.AddLine(new Vector2(202F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - Transforms: TicketResell
            // - - ShapeGroup: Group 33 Scale:0.017045455,0.017045455,
            // Offset:<-15.661364, 17.454546>
            // - Path 32+Path 31.PathGeometry
            CanvasGeometry Geometry_06()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_07(), Geometry_08() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - Transforms: TicketResell
            // - - - ShapeGroup: Group 33 Scale:0.017045455,0.017045455,
            // Offset:<-15.661364, 17.454546>
            // - - Path 32+Path 31.PathGeometry
            CanvasGeometry Geometry_07()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(288F, -1904F));
                    builder.AddLine(new Vector2(650F, -1904F));
                    builder.AddLine(new Vector2(650F, -462F));
                    builder.AddCubicBezier(new Vector2(650F, -413.333344F), new Vector2(657.5F, -376.166656F), new Vector2(672.5F, -350.5F));
                    builder.AddCubicBezier(new Vector2(687.5F, -324.833344F), new Vector2(707.333313F, -307.333344F), new Vector2(732F, -298F));
                    builder.AddCubicBezier(new Vector2(756.666687F, -288.666656F), new Vector2(784F, -284F), new Vector2(814F, -284F));
                    builder.AddCubicBezier(new Vector2(836.666687F, -284F), new Vector2(857.5F, -285.666656F), new Vector2(876.5F, -289F));
                    builder.AddCubicBezier(new Vector2(895.5F, -292.333344F), new Vector2(910F, -295.333344F), new Vector2(920F, -298F));
                    builder.AddLine(new Vector2(981F, -15F));
                    builder.AddCubicBezier(new Vector2(961.666687F, -8.33333302F), new Vector2(934.166687F, -1F), new Vector2(898.5F, 7F));
                    builder.AddCubicBezier(new Vector2(862.833313F, 15F), new Vector2(819.333313F, 19.666666F), new Vector2(768F, 21F));
                    builder.AddCubicBezier(new Vector2(677.333313F, 23.666666F), new Vector2(595.666687F, 9.83333302F), new Vector2(523F, -20.5F));
                    builder.AddCubicBezier(new Vector2(450.333344F, -50.8333321F), new Vector2(392.833344F, -98F), new Vector2(350.5F, -162F));
                    builder.AddCubicBezier(new Vector2(308.166656F, -226F), new Vector2(287.333344F, -306F), new Vector2(288F, -402F));
                    builder.AddLine(new Vector2(288F, -1904F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - Transforms: TicketResell
            // - - - ShapeGroup: Group 33 Scale:0.017045455,0.017045455,
            // Offset:<-15.661364, 17.454546>
            // - - Path 32+Path 31.PathGeometry
            CanvasGeometry Geometry_08()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(953F, -1536F));
                    builder.AddLine(new Vector2(953F, -1256F));
                    builder.AddLine(new Vector2(70F, -1256F));
                    builder.AddLine(new Vector2(70F, -1536F));
                    builder.AddLine(new Vector2(953F, -1536F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - Transforms: TicketResell
            // - - ShapeGroup: Group 31 Scale:0.017045455,0.017045455,
            // Offset:<-70.329544, 17.454546>
            // - Path 29+Path 28+Path 27.PathGeometry
            CanvasGeometry Geometry_09()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_10(), Geometry_11(), Geometry_12() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - Transforms: TicketResell
            // - - - ShapeGroup: Group 31 Scale:0.017045455,0.017045455,
            // Offset:<-70.329544, 17.454546>
            // - - Path 29+Path 28+Path 27.PathGeometry
            CanvasGeometry Geometry_10()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(1150F, 0F));
                    builder.AddLine(new Vector2(650F, -699F));
                    builder.AddLine(new Vector2(894F, -954F));
                    builder.AddLine(new Vector2(1583F, 0F));
                    builder.AddLine(new Vector2(1150F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - Transforms: TicketResell
            // - - - ShapeGroup: Group 31 Scale:0.017045455,0.017045455,
            // Offset:<-70.329544, 17.454546>
            // - - Path 29+Path 28+Path 27.PathGeometry
            CanvasGeometry Geometry_11()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(186F, 0F));
                    builder.AddLine(new Vector2(186F, -2048F));
                    builder.AddLine(new Vector2(548F, -2048F));
                    builder.AddLine(new Vector2(548F, 0F));
                    builder.AddLine(new Vector2(186F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - Transforms: TicketResell
            // - - - ShapeGroup: Group 31 Scale:0.017045455,0.017045455,
            // Offset:<-70.329544, 17.454546>
            // - - Path 29+Path 28+Path 27.PathGeometry
            CanvasGeometry Geometry_12()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(516F, -482F));
                    builder.AddLine(new Vector2(515F, -919F));
                    builder.AddLine(new Vector2(573F, -919F));
                    builder.AddLine(new Vector2(1125F, -1536F));
                    builder.AddLine(new Vector2(1548F, -1536F));
                    builder.AddLine(new Vector2(869F, -780F));
                    builder.AddLine(new Vector2(794F, -780F));
                    builder.AddLine(new Vector2(516F, -482F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - Transforms: TicketResell
            // - - ShapeGroup: Group 30 Scale:0.017045455,0.017045455,
            // Offset:<-98.05227, 17.454546>
            CanvasGeometry Geometry_13()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(856F, 30F));
                    builder.AddCubicBezier(new Vector2(702.666687F, 30F), new Vector2(571.166687F, -3.66666675F), new Vector2(461.5F, -71F));
                    builder.AddCubicBezier(new Vector2(351.833344F, -138.333328F), new Vector2(267.5F, -231.5F), new Vector2(208.5F, -350.5F));
                    builder.AddCubicBezier(new Vector2(149.5F, -469.5F), new Vector2(120F, -606.666687F), new Vector2(120F, -762F));
                    builder.AddCubicBezier(new Vector2(120F, -918F), new Vector2(150F, -1055.83337F), new Vector2(210F, -1175.5F));
                    builder.AddCubicBezier(new Vector2(270F, -1295.16663F), new Vector2(354.833344F, -1388.5F), new Vector2(464.5F, -1455.5F));
                    builder.AddCubicBezier(new Vector2(574.166687F, -1522.5F), new Vector2(704F, -1556F), new Vector2(854F, -1556F));
                    builder.AddCubicBezier(new Vector2(978.666687F, -1556F), new Vector2(1089.16663F, -1533.16663F), new Vector2(1185.5F, -1487.5F));
                    builder.AddCubicBezier(new Vector2(1281.83337F, -1441.83337F), new Vector2(1358.66663F, -1377.5F), new Vector2(1416F, -1294.5F));
                    builder.AddCubicBezier(new Vector2(1473.33337F, -1211.5F), new Vector2(1506F, -1114.66663F), new Vector2(1514F, -1004F));
                    builder.AddLine(new Vector2(1168F, -1004F));
                    builder.AddCubicBezier(new Vector2(1154F, -1078F), new Vector2(1120.83337F, -1139.83337F), new Vector2(1068.5F, -1189.5F));
                    builder.AddCubicBezier(new Vector2(1016.16669F, -1239.16663F), new Vector2(946.333313F, -1264F), new Vector2(859F, -1264F));
                    builder.AddCubicBezier(new Vector2(785F, -1264F), new Vector2(720F, -1244.16663F), new Vector2(664F, -1204.5F));
                    builder.AddCubicBezier(new Vector2(608F, -1164.83337F), new Vector2(564.5F, -1108F), new Vector2(533.5F, -1034F));
                    builder.AddCubicBezier(new Vector2(502.5F, -960F), new Vector2(487F, -871.333313F), new Vector2(487F, -768F));
                    builder.AddCubicBezier(new Vector2(487F, -663.333313F), new Vector2(502.333344F, -573.5F), new Vector2(533F, -498.5F));
                    builder.AddCubicBezier(new Vector2(563.666687F, -423.5F), new Vector2(606.833313F, -365.833344F), new Vector2(662.5F, -325.5F));
                    builder.AddCubicBezier(new Vector2(718.166687F, -285.166656F), new Vector2(783.666687F, -265F), new Vector2(859F, -265F));
                    builder.AddCubicBezier(new Vector2(912.333313F, -265F), new Vector2(960.166687F, -275.166656F), new Vector2(1002.5F, -295.5F));
                    builder.AddCubicBezier(new Vector2(1044.83337F, -315.833344F), new Vector2(1080.33337F, -345.333344F), new Vector2(1109F, -384F));
                    builder.AddCubicBezier(new Vector2(1137.66663F, -422.666656F), new Vector2(1157.33337F, -469.666656F), new Vector2(1168F, -525F));
                    builder.AddLine(new Vector2(1514F, -525F));
                    builder.AddCubicBezier(new Vector2(1505.33337F, -416.333344F), new Vector2(1473.33337F, -320.166656F), new Vector2(1418F, -236.5F));
                    builder.AddCubicBezier(new Vector2(1362.66663F, -152.833328F), new Vector2(1287.33337F, -87.5F), new Vector2(1192F, -40.5F));
                    builder.AddCubicBezier(new Vector2(1096.66663F, 6.5F), new Vector2(984.666687F, 30F), new Vector2(856F, 30F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - Transforms: TicketResell
            // - - ShapeGroup: Group 29 Scale:0.017045455,0.017045455,
            // Offset:<-110.556816, 17.454546>
            // - Path 25+Path 24.PathGeometry
            CanvasGeometry Geometry_14()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_15(), Geometry_16() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - Transforms: TicketResell
            // - - - ShapeGroup: Group 29 Scale:0.017045455,0.017045455,
            // Offset:<-110.556816, 17.454546>
            // - - Path 25+Path 24.PathGeometry
            CanvasGeometry Geometry_15()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(368.5F, -1754F));
                    builder.AddCubicBezier(new Vector2(310.833344F, -1754F), new Vector2(261.333344F, -1773.27136F), new Vector2(220F, -1811.81421F));
                    builder.AddCubicBezier(new Vector2(178.666672F, -1850.35693F), new Vector2(158F, -1896.69031F), new Vector2(158F, -1950.81421F));
                    builder.AddCubicBezier(new Vector2(158F, -2004.93811F), new Vector2(178.625F, -2051.16675F), new Vector2(219.875F, -2089.5F));
                    builder.AddCubicBezier(new Vector2(261.125F, -2127.83325F), new Vector2(310.5F, -2147F), new Vector2(368F, -2147F));
                    builder.AddCubicBezier(new Vector2(426F, -2147F), new Vector2(475.5F, -2127.72852F), new Vector2(516.5F, -2089.18579F));
                    builder.AddCubicBezier(new Vector2(557.5F, -2050.64307F), new Vector2(578F, -2004.30969F), new Vector2(578F, -1950.18579F));
                    builder.AddCubicBezier(new Vector2(578F, -1896.06189F), new Vector2(557.5F, -1849.83337F), new Vector2(516.5F, -1811.5F));
                    builder.AddCubicBezier(new Vector2(475.5F, -1773.16663F), new Vector2(426.166656F, -1754F), new Vector2(368.5F, -1754F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Layer aggregator
            // - - - - Transforms: TicketResell
            // - - - ShapeGroup: Group 29 Scale:0.017045455,0.017045455,
            // Offset:<-110.556816, 17.454546>
            // - - Path 25+Path 24.PathGeometry
            CanvasGeometry Geometry_16()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(186F, 0F));
                    builder.AddLine(new Vector2(186F, -1536F));
                    builder.AddLine(new Vector2(548F, -1536F));
                    builder.AddLine(new Vector2(548F, 0F));
                    builder.AddLine(new Vector2(186F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - Transforms: TicketResell
            // - - ShapeGroup: Group 28 Scale:0.017045455,0.017045455,
            // Offset:<-142.22046, 17.454546>
            CanvasGeometry Geometry_17()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(112F, -1737F));
                    builder.AddLine(new Vector2(112F, -2048F));
                    builder.AddLine(new Vector2(1746F, -2048F));
                    builder.AddLine(new Vector2(1746F, -1737F));
                    builder.AddLine(new Vector2(1113F, -1737F));
                    builder.AddLine(new Vector2(1113F, 0F));
                    builder.AddLine(new Vector2(745F, 0F));
                    builder.AddLine(new Vector2(745F, -1737F));
                    builder.AddLine(new Vector2(112F, -1737F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Color
            ColorKeyFrameAnimation ColorAnimation_Transparent_to_Black()
            {
                // Frame 0.
                var result = CreateColorKeyFrameAnimation(0F, Color.FromArgb(0x00, 0x00, 0x00, 0x00), HoldThenStepEasingFunction());
                // Frame 147.
                // Black
                result.InsertKeyFrame(0.49000001F, Color.FromArgb(0xFF, 0x00, 0x00, 0x00), CubicBezierEasingFunction_0());
                return result;
            }

            CompositionColorBrush AnimatedColorBrush_Transparent_to_Black()
            {
                if (_animatedColorBrush_Transparent_to_Black != null) { return _animatedColorBrush_Transparent_to_Black; }
                var result = _animatedColorBrush_Transparent_to_Black = _c.CreateColorBrush();
                return result;
            }

            // - Layer aggregator
            // Rectangle 2
            CompositionColorBrush ColorBrush_SemiTransparentAlmostSpringGreen_A42BFF80()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xA4, 0x2B, 0xFF, 0x80));
            }

            // Layer aggregator
            // ShapeGroup: Group 40
            CompositionContainerShape ContainerShape()
            {
                if (_containerShape != null) { return _containerShape; }
                var result = _containerShape = _c.CreateContainerShape();
                var shapes = result.Shapes;
                // ShapeGroup: Group 39 Scale:0.017045455,0.017045455, Offset:<129.71591, 17.454546>
                shapes.Add(SpriteShape_00());
                // ShapeGroup: Group 38 Scale:0.017045455,0.017045455, Offset:<117.211365, 17.454546>
                shapes.Add(SpriteShape_01());
                // ShapeGroup: Group 37 Scale:0.017045455,0.017045455, Offset:<88.76591, 17.454546>
                shapes.Add(SpriteShape_02());
                // ShapeGroup: Group 36 Scale:0.017045455,0.017045455, Offset:<62.420456, 17.454546>
                shapes.Add(SpriteShape_03());
                // ShapeGroup: Group 35 Scale:0.017045455,0.017045455, Offset:<33.975, 17.454546>
                shapes.Add(SpriteShape_04());
                // ShapeGroup: Group 34 Scale:0.017045455,0.017045455, Offset:<3.1295455, 17.454546>
                shapes.Add(SpriteShape_05());
                // ShapeGroup: Group 33 Scale:0.017045455,0.017045455, Offset:<-15.661364, 17.454546>
                shapes.Add(SpriteShape_06());
                // ShapeGroup: Group 32 Scale:0.017045455,0.017045455, Offset:<-44.10682, 17.454546>
                shapes.Add(SpriteShape_07());
                // ShapeGroup: Group 31 Scale:0.017045455,0.017045455, Offset:<-70.329544, 17.454546>
                shapes.Add(SpriteShape_08());
                // ShapeGroup: Group 30 Scale:0.017045455,0.017045455, Offset:<-98.05227, 17.454546>
                shapes.Add(SpriteShape_09());
                // ShapeGroup: Group 29 Scale:0.017045455,0.017045455, Offset:<-110.556816, 17.454546>
                shapes.Add(SpriteShape_10());
                // ShapeGroup: Group 28 Scale:0.017045455,0.017045455, Offset:<-142.22046, 17.454546>
                shapes.Add(SpriteShape_11());
                return result;
            }

            CompositionPathGeometry PathGeometry_0()
            {
                return (_pathGeometry_0 == null)
                    ? _pathGeometry_0 = _c.CreatePathGeometry(new CompositionPath(Geometry_00()))
                    : _pathGeometry_0;
            }

            CompositionPathGeometry PathGeometry_1()
            {
                return (_pathGeometry_1 == null)
                    ? _pathGeometry_1 = _c.CreatePathGeometry(new CompositionPath(Geometry_01()))
                    : _pathGeometry_1;
            }

            // - - Layer aggregator
            // - Transforms: TicketResell
            // ShapeGroup: Group 36 Scale:0.017045455,0.017045455, Offset:<62.420456, 17.454546>
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_02()));
            }

            // - - Layer aggregator
            // - Transforms: TicketResell
            // ShapeGroup: Group 34 Scale:0.017045455,0.017045455, Offset:<3.1295455, 17.454546>
            // Path 34+Path 33.PathGeometry
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_03()));
            }

            // - - Layer aggregator
            // - Transforms: TicketResell
            // ShapeGroup: Group 33 Scale:0.017045455,0.017045455, Offset:<-15.661364, 17.454546>
            // Path 32+Path 31.PathGeometry
            CompositionPathGeometry PathGeometry_4()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_06()));
            }

            // - - Layer aggregator
            // - Transforms: TicketResell
            // ShapeGroup: Group 31 Scale:0.017045455,0.017045455, Offset:<-70.329544, 17.454546>
            // Path 29+Path 28+Path 27.PathGeometry
            CompositionPathGeometry PathGeometry_5()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_09()));
            }

            // - - Layer aggregator
            // - Transforms: TicketResell
            // ShapeGroup: Group 30 Scale:0.017045455,0.017045455, Offset:<-98.05227, 17.454546>
            CompositionPathGeometry PathGeometry_6()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_13()));
            }

            // - - Layer aggregator
            // - Transforms: TicketResell
            // ShapeGroup: Group 29 Scale:0.017045455,0.017045455, Offset:<-110.556816, 17.454546>
            // Path 25+Path 24.PathGeometry
            CompositionPathGeometry PathGeometry_7()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_14()));
            }

            // - - Layer aggregator
            // - Transforms: TicketResell
            // ShapeGroup: Group 28 Scale:0.017045455,0.017045455, Offset:<-142.22046, 17.454546>
            CompositionPathGeometry PathGeometry_8()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_17()));
            }

            // Rectangle 2.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle()
            {
                if (_roundedRectangle != null) { return _roundedRectangle; }
                var result = _roundedRectangle = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(0F, 0F);
                result.Offset = new Vector2(-496.794525F, -333.556183F);
                BindProperty(_roundedRectangle, "CornerRadius", "Vector2(Min(32,(Min(my.Size.X,my.Size.Y)/2)),Min(32,(Min(my.Size.X,my.Size.Y)/2)))", "my", _roundedRectangle);
                BindProperty(_roundedRectangle, "Offset", "Vector2(0,0)-(my.Size/Vector2(2,2))", "my", _roundedRectangle);
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Path 39
            CompositionSpriteShape SpriteShape_00()
            {
                // Offset:<129.71591, 17.454546>, Scale:<0.017045455, 0.017045455>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.0170454551F, 0F, 0F, 0.0170454551F, 129.715912F, 17.454546F), AnimatedColorBrush_Transparent_to_Black());;
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Path 38
            CompositionSpriteShape SpriteShape_01()
            {
                // Offset:<117.211365, 17.454546>, Scale:<0.017045455, 0.017045455>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.0170454551F, 0F, 0F, 0.0170454551F, 117.211365F, 17.454546F), AnimatedColorBrush_Transparent_to_Black());;
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Path 37
            CompositionSpriteShape SpriteShape_02()
            {
                // Offset:<88.76591, 17.454546>, Scale:<0.017045455, 0.017045455>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.0170454551F, 0F, 0F, 0.0170454551F, 88.7659073F, 17.454546F), AnimatedColorBrush_Transparent_to_Black());;
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Path 36
            CompositionSpriteShape SpriteShape_03()
            {
                // Offset:<62.420456, 17.454546>, Scale:<0.017045455, 0.017045455>
                var geometry = PathGeometry_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.0170454551F, 0F, 0F, 0.0170454551F, 62.4204559F, 17.454546F), AnimatedColorBrush_Transparent_to_Black());;
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Path 35
            CompositionSpriteShape SpriteShape_04()
            {
                // Offset:<33.975, 17.454546>, Scale:<0.017045455, 0.017045455>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.0170454551F, 0F, 0F, 0.0170454551F, 33.9749985F, 17.454546F), AnimatedColorBrush_Transparent_to_Black());;
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Path 34+Path 33
            CompositionSpriteShape SpriteShape_05()
            {
                // Offset:<3.1295455, 17.454546>, Scale:<0.017045455, 0.017045455>
                var geometry = PathGeometry_3();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.0170454551F, 0F, 0F, 0.0170454551F, 3.12954545F, 17.454546F), AnimatedColorBrush_Transparent_to_Black());;
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Path 32+Path 31
            CompositionSpriteShape SpriteShape_06()
            {
                // Offset:<-15.661364, 17.454546>, Scale:<0.017045455, 0.017045455>
                var geometry = PathGeometry_4();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.0170454551F, 0F, 0F, 0.0170454551F, -15.6613636F, 17.454546F), AnimatedColorBrush_Transparent_to_Black());;
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Path 30
            CompositionSpriteShape SpriteShape_07()
            {
                // Offset:<-44.10682, 17.454546>, Scale:<0.017045455, 0.017045455>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.0170454551F, 0F, 0F, 0.0170454551F, -44.1068192F, 17.454546F), AnimatedColorBrush_Transparent_to_Black());;
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Path 29+Path 28+Path 27
            CompositionSpriteShape SpriteShape_08()
            {
                // Offset:<-70.329544, 17.454546>, Scale:<0.017045455, 0.017045455>
                var geometry = PathGeometry_5();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.0170454551F, 0F, 0F, 0.0170454551F, -70.3295441F, 17.454546F), AnimatedColorBrush_Transparent_to_Black());;
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Path 26
            CompositionSpriteShape SpriteShape_09()
            {
                // Offset:<-98.05227, 17.454546>, Scale:<0.017045455, 0.017045455>
                var geometry = PathGeometry_6();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.0170454551F, 0F, 0F, 0.0170454551F, -98.052269F, 17.454546F), AnimatedColorBrush_Transparent_to_Black());;
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Path 25+Path 24
            CompositionSpriteShape SpriteShape_10()
            {
                // Offset:<-110.556816, 17.454546>, Scale:<0.017045455, 0.017045455>
                var geometry = PathGeometry_7();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.0170454551F, 0F, 0F, 0.0170454551F, -110.556816F, 17.454546F), AnimatedColorBrush_Transparent_to_Black());;
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Path 23
            CompositionSpriteShape SpriteShape_11()
            {
                // Offset:<-142.22046, 17.454546>, Scale:<0.017045455, 0.017045455>
                var geometry = PathGeometry_8();
                var result = CreateSpriteShape(geometry, new Matrix3x2(0.0170454551F, 0F, 0F, 0.0170454551F, -142.220459F, 17.454546F), AnimatedColorBrush_Transparent_to_Black());;
                return result;
            }

            // Layer aggregator
            // Rectangle 2
            CompositionSpriteShape SpriteShape_12()
            {
                if (_spriteShape_12 != null) { return _spriteShape_12; }
                var result = _spriteShape_12 = _c.CreateSpriteShape(RoundedRectangle());
                result.FillBrush = ColorBrush_SemiTransparentAlmostSpringGreen_A42BFF80();
                return result;
            }

            // Transforms for TicketLogo.png 1
            CompositionSurfaceBrush SurfaceBrush()
            {
                return _c.CreateSurfaceBrush(_image_0);
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Layer aggregator
                children.InsertAtTop(ShapeVisual_0());
                // Transforms for TicketLogo.png 1
                children.InsertAtTop(SpriteVisual_0());
                // Shape tree root for layer: TicketResell
                children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.800000012F, 0F), new Vector2(0.5F, 1F))
                    : _cubicBezierEasingFunction_0;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return (_cubicBezierEasingFunction_1 == null)
                    ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_1;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return (_cubicBezierEasingFunction_2 == null)
                    ? _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.25F, 0.25F), new Vector2(0F, 1F))
                    : _cubicBezierEasingFunction_2;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(1920F, 1080F);
                var shapes = result.Shapes;
                // Transforms: TicketResell
                shapes.Add(ContainerShape());
                // Rectangle 2
                shapes.Add(SpriteShape_12());
                return result;
            }

            // Shape tree root for layer: TicketResell
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(1920F, 1080F);
                return result;
            }

            // Transforms for TicketLogo.png 1
            SpriteVisual SpriteVisual_0()
            {
                if (_spriteVisual_0 != null) { return _spriteVisual_0; }
                var result = _spriteVisual_0 = _c.CreateSpriteVisual();
                result.CenterPoint = new Vector3(256F, 256F, 0F);
                result.Size = new Vector2(512F, 512F);
                result.Brush = SurfaceBrush();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // - Layer aggregator
            // Transforms: TicketResell
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(960F, 1260.05725F), HoldThenStepEasingFunction());
                // Frame 147.
                result.InsertKeyFrame(0.49000001F, new Vector2(960F, 867.378845F), CubicBezierEasingFunction_0());
                return result;
            }

            // - Layer aggregator
            // Rectangle 2
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1931.44922F, 1375.19922F), HoldThenStepEasingFunction());
                // Frame 52.
                result.InsertKeyFrame(0.173333332F, new Vector2(960F, 498F), _c.CreateCubicBezierEasingFunction(new Vector2(0F, 1F), new Vector2(0F, 1F)));
                // Frame 231.
                result.InsertKeyFrame(0.769999981F, new Vector2(960F, 540F), _c.CreateCubicBezierEasingFunction(new Vector2(0.678160906F, 0F), new Vector2(0.00574712642F, 1F)));
                return result;
            }

            // Rectangle 2.RectangleGeometry
            // Size
            Vector2KeyFrameAnimation SizeVector2Animation()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(993.58905F, 667.112366F), HoldThenStepEasingFunction());
                // Frame 52.
                result.InsertKeyFrame(0.173333332F, new Vector2(1784.48755F, 865.510681F), CubicBezierEasingFunction_1());
                return result;
            }

            // Transforms for TicketLogo.png 1
            // Offset
            Vector3KeyFrameAnimation OffsetVector3Animation()
            {
                // Frame 0.
                var result = CreateVector3KeyFrameAnimation(0F, new Vector3(1434.65466F, 1004.05725F, 0F), HoldThenStepEasingFunction());
                // Frame 52.
                result.InsertKeyFrame(0.173333332F, new Vector3(704F, 284F, 0F), CubicBezierEasingFunction_2());
                // Frame 90.
                result.InsertKeyFrame(0.300000012F, new Vector3(700.895874F, 280.940918F, 0F), CubicBezierEasingFunction_2());
                // Frame 231.
                result.InsertKeyFrame(0.769999981F, new Vector3(704F, 334F, 0F), _c.CreateCubicBezierEasingFunction(new Vector2(0F, 0.427040815F), new Vector2(0F, 1F)));
                return result;
            }

            // Transforms for TicketLogo.png 1
            // Scale
            Vector3KeyFrameAnimation ScaleVector3Animation()
            {
                // Frame 0.
                var result = CreateVector3KeyFrameAnimation(0F, new Vector3(1.06701803F, 0.610681534F, 0F), HoldThenStepEasingFunction());
                // Frame 52.
                result.InsertKeyFrame(0.173333332F, new Vector3(1F, 1F, 0F), CubicBezierEasingFunction_1());
                // Frame 90.
                result.InsertKeyFrame(0.300000012F, new Vector3(1.00515521F, 0.970052421F, 0F), CubicBezierEasingFunction_1());
                return result;
            }

            internal TicketPopup_AnimatedVisual(
                Compositor compositor,
                LoadedImageSurface image_0
                )
            {
                _c = compositor;
                _image_0 = image_0;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(1920F, 1080F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _animatedColorBrush_Transparent_to_Black.StartAnimation("Color", ColorAnimation_Transparent_to_Black(), AnimationController_0());
                _containerShape.StartAnimation("Offset", OffsetVector2Animation_0(), AnimationController_0());
                _roundedRectangle.StartAnimation("Size", SizeVector2Animation(), AnimationController_0());
                _spriteShape_12.StartAnimation("Offset", OffsetVector2Animation_1(), AnimationController_0());
                _spriteVisual_0.StartAnimation("Scale", ScaleVector3Animation(), AnimationController_0());
                _spriteVisual_0.StartAnimation("Offset", OffsetVector3Animation(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _animatedColorBrush_Transparent_to_Black.StopAnimation("Color");
                _containerShape.StopAnimation("Offset");
                _roundedRectangle.StopAnimation("Size");
                _spriteShape_12.StopAnimation("Offset");
                _spriteVisual_0.StopAnimation("Scale");
                _spriteVisual_0.StopAnimation("Offset");
            }

        }
    }
}
